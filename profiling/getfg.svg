<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="485"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="485"> </text>
<g id="frames">
<g>
<title>all (6,680 samples, 100.00%)</title><rect x="10.0" y="451.0" width="1180.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.0" y="462.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (23 samples, 0.34%)</title><rect x="10.0" y="435.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (7 samples, 0.10%)</title><rect x="10.2" y="419.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.2" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.07%)</title><rect x="10.2" y="403.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.2" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.07%)</title><rect x="10.2" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.2" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.06%)</title><rect x="10.4" y="371.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.4" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.06%)</title><rect x="10.4" y="355.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.4" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (3 samples, 0.04%)</title><rect x="10.4" y="339.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.4" y="350.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="10.5" y="323.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.5" y="334.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (2 samples, 0.03%)</title><rect x="11.1" y="403.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.1" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (14 samples, 0.21%)</title><rect x="11.4" y="419.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.4" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (14 samples, 0.21%)</title><rect x="11.4" y="403.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.4" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (13 samples, 0.19%)</title><rect x="11.6" y="387.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.6" y="398.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.03%)</title><rect x="11.6" y="371.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.6" y="382.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (7 samples, 0.10%)</title><rect x="12.1" y="371.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="15.1" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.04%)</title><rect x="12.3" y="355.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.3" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="12.3" y="339.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.3" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.03%)</title><rect x="12.3" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.3" y="334.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.03%)</title><rect x="12.3" y="307.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.3" y="318.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (2 samples, 0.03%)</title><rect x="12.3" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.3" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="12.8" y="355.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.8" y="366.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.04%)</title><rect x="13.4" y="371.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.4" y="382.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="13.4" y="355.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="16.4" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="14.1" y="435.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="17.1" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="14.1" y="419.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.1" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="14.1" y="403.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.1" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="14.1" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.1" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (12 samples, 0.18%)</title><rect x="14.4" y="435.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="17.4" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (8 samples, 0.12%)</title><rect x="14.9" y="419.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="17.9" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (7 samples, 0.10%)</title><rect x="14.9" y="403.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="17.9" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.09%)</title><rect x="14.9" y="387.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="17.9" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.06%)</title><rect x="15.1" y="371.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="18.1" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.06%)</title><rect x="15.1" y="355.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.1" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (19 samples, 0.28%)</title><rect x="16.5" y="435.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.5" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (18 samples, 0.27%)</title><rect x="16.5" y="419.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.5" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (9 samples, 0.13%)</title><rect x="17.1" y="403.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="20.1" y="414.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (9 samples, 0.13%)</title><rect x="17.1" y="387.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="20.1" y="398.0"></text>
</g>
<g>
<title>__gettimeofday (2 samples, 0.03%)</title><rect x="17.1" y="371.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="20.1" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.09%)</title><rect x="17.4" y="371.0" width="1.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="20.4" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (5 samples, 0.07%)</title><rect x="18.8" y="403.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="21.8" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.03%)</title><rect x="19.4" y="387.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="22.4" y="398.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (2 samples, 0.03%)</title><rect x="20.1" y="435.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="23.1" y="446.0"></text>
</g>
<g>
<title>[not_walkable] (2 samples, 0.03%)</title><rect x="20.4" y="435.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="23.4" y="446.0"></text>
</g>
<g>
<title>[not_walkable_Java] (12 samples, 0.18%)</title><rect x="20.8" y="435.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="23.8" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.06%)</title><rect x="21.0" y="419.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.0" y="430.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.03%)</title><rect x="21.0" y="403.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.0" y="414.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (2 samples, 0.03%)</title><rect x="21.3" y="403.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="24.3" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.04%)</title><rect x="21.7" y="419.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="24.7" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.04%)</title><rect x="21.7" y="403.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="24.7" y="414.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.04%)</title><rect x="21.7" y="387.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="24.7" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="21.8" y="371.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="24.8" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (3 samples, 0.04%)</title><rect x="22.4" y="419.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="25.4" y="430.0"></text>
</g>
<g>
<title>[unknown_Java] (50 samples, 0.75%)</title><rect x="22.9" y="435.0" width="8.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="25.9" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="30.8" y="419.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="33.8" y="430.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2 samples, 0.03%)</title><rect x="30.8" y="403.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="33.8" y="414.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.04%)</title><rect x="31.2" y="419.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="34.2" y="430.0"></text>
</g>
<g>
<title>_res (3 samples, 0.04%)</title><rect x="31.2" y="403.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="34.2" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.run (4,318 samples, 64.64%)</title><rect x="31.7" y="435.0" width="762.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.7" y="446.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4,318 samples, 64.64%)</title><rect x="31.7" y="419.0" width="762.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.7" y="430.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (4,318 samples, 64.64%)</title><rect x="31.7" y="403.0" width="762.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.7" y="414.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.10%)</title><rect x="32.8" y="387.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.10%)</title><rect x="32.8" y="371.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.10%)</title><rect x="32.8" y="355.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,437 samples, 21.51%)</title><rect x="34.0" y="387.0" width="253.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.0" y="398.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1,436 samples, 21.50%)</title><rect x="34.2" y="371.0" width="253.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.2" y="382.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,324 samples, 19.82%)</title><rect x="34.2" y="355.0" width="233.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="37.2" y="366.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.07%)</title><rect x="34.7" y="339.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="37.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (6 samples, 0.09%)</title><rect x="35.6" y="339.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (9 samples, 0.13%)</title><rect x="36.7" y="339.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="39.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (21 samples, 0.31%)</title><rect x="38.3" y="339.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 0.31%)</title><rect x="38.3" y="323.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="41.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 0.24%)</title><rect x="38.8" y="307.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="41.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 0.24%)</title><rect x="38.8" y="291.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="41.8" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (16 samples, 0.24%)</title><rect x="38.8" y="275.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.8" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (16 samples, 0.24%)</title><rect x="38.8" y="259.0" width="2.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="41.8" y="270.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="39.1" y="243.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="42.1" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.16%)</title><rect x="39.7" y="243.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="42.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title><rect x="41.6" y="307.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1,280 samples, 19.16%)</title><rect x="42.0" y="339.0" width="226.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.0" y="350.0">java/util/concurrent/locks/Loc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1,280 samples, 19.16%)</title><rect x="42.0" y="323.0" width="226.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.0" y="334.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>EventThreadPark::EventThreadPark(EventStartTime) (2 samples, 0.03%)</title><rect x="48.3" y="307.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="51.3" y="318.0"></text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (2 samples, 0.03%)</title><rect x="48.9" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="51.9" y="318.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.04%)</title><rect x="49.6" y="307.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="52.6" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1,231 samples, 18.43%)</title><rect x="50.5" y="307.0" width="217.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="53.5" y="318.0">Unsafe_Park(JNIEnv_*, _jobjec..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (5 samples, 0.07%)</title><rect x="51.5" y="291.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="54.5" y="302.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.03%)</title><rect x="52.0" y="275.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="55.0" y="286.0"></text>
</g>
<g>
<title>JavaThread::parker() (2 samples, 0.03%)</title><rect x="53.5" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="56.5" y="302.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.06%)</title><rect x="54.0" y="291.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="57.0" y="302.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (4 samples, 0.06%)</title><rect x="54.0" y="275.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="57.0" y="286.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.04%)</title><rect x="54.2" y="259.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="57.2" y="270.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (3 samples, 0.04%)</title><rect x="54.2" y="243.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="57.2" y="254.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (3 samples, 0.04%)</title><rect x="54.2" y="227.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="57.2" y="238.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (2 samples, 0.03%)</title><rect x="54.3" y="211.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="57.3" y="222.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (14 samples, 0.21%)</title><rect x="54.7" y="291.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="57.7" y="302.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (7 samples, 0.10%)</title><rect x="54.7" y="275.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="57.7" y="286.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (2 samples, 0.03%)</title><rect x="54.9" y="259.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="57.9" y="270.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (4 samples, 0.06%)</title><rect x="55.2" y="259.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="58.2" y="270.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (4 samples, 0.06%)</title><rect x="55.9" y="275.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="58.9" y="286.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (3 samples, 0.04%)</title><rect x="56.6" y="275.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="59.6" y="286.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (3 samples, 0.04%)</title><rect x="56.6" y="259.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="59.6" y="270.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (3 samples, 0.04%)</title><rect x="57.2" y="291.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="60.2" y="302.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (3 samples, 0.04%)</title><rect x="57.2" y="275.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="60.2" y="286.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.03%)</title><rect x="57.7" y="291.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="60.7" y="302.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.03%)</title><rect x="57.7" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="60.7" y="286.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.03%)</title><rect x="58.0" y="291.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="61.0" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1,142 samples, 17.10%)</title><rect x="58.6" y="291.0" width="201.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="61.6" y="302.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (4 samples, 0.06%)</title><rect x="60.5" y="275.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="63.5" y="286.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (14 samples, 0.21%)</title><rect x="61.2" y="275.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="64.2" y="286.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.04%)</title><rect x="62.8" y="259.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="65.8" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="63.3" y="259.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="66.3" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (1,090 samples, 16.32%)</title><rect x="63.9" y="275.0" width="192.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="66.9" y="286.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (15 samples, 0.22%)</title><rect x="256.4" y="275.0" width="2.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="259.4" y="286.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (5 samples, 0.07%)</title><rect x="258.2" y="259.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="261.2" y="270.0"></text>
</g>
<g>
<title>_pthread_testcancel (4 samples, 0.06%)</title><rect x="259.1" y="275.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="262.1" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="260.0" y="275.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="263.0" y="286.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.03%)</title><rect x="260.5" y="291.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="263.5" y="302.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (4 samples, 0.06%)</title><rect x="260.8" y="291.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="263.8" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (7 samples, 0.10%)</title><rect x="261.7" y="291.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="264.7" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.07%)</title><rect x="262.1" y="275.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="265.1" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title><rect x="262.1" y="259.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="265.1" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="262.3" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="265.3" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="262.3" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="265.3" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="262.3" y="211.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="265.3" y="222.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="262.3" y="195.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="265.3" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="262.6" y="259.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="265.6" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (10 samples, 0.15%)</title><rect x="263.0" y="291.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="266.0" y="302.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.04%)</title><rect x="263.0" y="275.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="266.0" y="286.0"></text>
</g>
<g>
<title>os::is_MP() (3 samples, 0.04%)</title><rect x="263.0" y="259.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="266.0" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.06%)</title><rect x="263.5" y="275.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="266.5" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="264.4" y="275.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="267.4" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="264.4" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="267.4" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.06%)</title><rect x="264.7" y="291.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="267.7" y="302.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title><rect x="265.6" y="291.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="268.6" y="302.0"></text>
</g>
<g>
<title>pthread_cond_wait (4 samples, 0.06%)</title><rect x="266.1" y="291.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="269.1" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (5 samples, 0.07%)</title><rect x="266.8" y="291.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="269.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (28 samples, 0.42%)</title><rect x="268.1" y="355.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (28 samples, 0.42%)</title><rect x="268.1" y="339.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (27 samples, 0.40%)</title><rect x="268.1" y="323.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="271.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (17 samples, 0.25%)</title><rect x="268.8" y="307.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (17 samples, 0.25%)</title><rect x="268.8" y="291.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (3 samples, 0.04%)</title><rect x="268.8" y="275.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (14 samples, 0.21%)</title><rect x="269.3" y="275.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.3" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (13 samples, 0.19%)</title><rect x="269.5" y="259.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="272.5" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (13 samples, 0.19%)</title><rect x="269.5" y="243.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="272.5" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (10 samples, 0.15%)</title><rect x="269.7" y="227.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="272.7" y="238.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.03%)</title><rect x="271.4" y="227.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="274.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (6 samples, 0.09%)</title><rect x="271.8" y="307.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (84 samples, 1.26%)</title><rect x="273.0" y="355.0" width="14.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="276.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (84 samples, 1.26%)</title><rect x="273.0" y="339.0" width="14.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (84 samples, 1.26%)</title><rect x="273.0" y="323.0" width="14.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (84 samples, 1.26%)</title><rect x="273.0" y="307.0" width="14.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="276.0" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (84 samples, 1.26%)</title><rect x="273.0" y="291.0" width="14.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.0" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (71 samples, 1.06%)</title><rect x="275.1" y="275.0" width="12.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="278.1" y="286.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.03%)</title><rect x="275.5" y="259.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="278.5" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.03%)</title><rect x="276.2" y="259.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="279.2" y="270.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.04%)</title><rect x="276.6" y="259.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="279.6" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (57 samples, 0.85%)</title><rect x="277.1" y="259.0" width="10.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="280.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer$$Lambda$73/922451766.run (2,868 samples, 42.93%)</title><rect x="287.9" y="387.0" width="506.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.9" y="398.0">ru/mail/polis/service/prohladenn/MyHttpServer$$Lambda$73/922451766.run</text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer.lambda$executeAsync$3 (2,866 samples, 42.90%)</title><rect x="288.2" y="371.0" width="506.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.2" y="382.0">ru/mail/polis/service/prohladenn/MyHttpServer.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (939 samples, 14.06%)</title><rect x="288.7" y="355.0" width="165.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="291.7" y="366.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (915 samples, 13.70%)</title><rect x="290.5" y="339.0" width="161.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.5" y="350.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (50 samples, 0.75%)</title><rect x="290.7" y="323.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (21 samples, 0.31%)</title><rect x="295.8" y="307.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.8" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (21 samples, 0.31%)</title><rect x="295.8" y="291.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.8" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (21 samples, 0.31%)</title><rect x="295.8" y="275.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.charAt (21 samples, 0.31%)</title><rect x="295.8" y="259.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="298.8" y="270.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="298.6" y="243.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="301.6" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="299.0" y="243.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="302.0" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (864 samples, 12.93%)</title><rect x="299.5" y="323.0" width="152.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.5" y="334.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session.write (864 samples, 12.93%)</title><rect x="299.5" y="307.0" width="152.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.5" y="318.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (856 samples, 12.81%)</title><rect x="299.5" y="291.0" width="151.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.5" y="302.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (856 samples, 12.81%)</title><rect x="299.5" y="275.0" width="151.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.5" y="286.0">one/nio/net/JavaSoc..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (29 samples, 0.43%)</title><rect x="300.1" y="259.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="303.1" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (29 samples, 0.43%)</title><rect x="300.1" y="243.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="303.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (29 samples, 0.43%)</title><rect x="300.1" y="227.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.1" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (29 samples, 0.43%)</title><rect x="300.1" y="211.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (28 samples, 0.42%)</title><rect x="300.1" y="195.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="303.1" y="206.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (3 samples, 0.04%)</title><rect x="301.8" y="179.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="304.8" y="190.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="302.4" y="179.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="305.4" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.18%)</title><rect x="302.9" y="179.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="305.9" y="190.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.09%)</title><rect x="303.2" y="163.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="306.2" y="174.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.07%)</title><rect x="303.4" y="147.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="306.4" y="158.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="303.9" y="131.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="306.9" y="142.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.06%)</title><rect x="304.3" y="163.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="307.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="305.2" y="259.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="308.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (822 samples, 12.31%)</title><rect x="305.5" y="259.0" width="145.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.5" y="270.0">sun/nio/ch/SocketC..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.12%)</title><rect x="305.7" y="243.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.07%)</title><rect x="306.2" y="227.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="309.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.07%)</title><rect x="306.2" y="211.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="309.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.07%)</title><rect x="306.2" y="195.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.03%)</title><rect x="306.8" y="179.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.06%)</title><rect x="307.1" y="243.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.04%)</title><rect x="307.3" y="227.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="310.3" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (808 samples, 12.10%)</title><rect x="307.8" y="243.0" width="142.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.8" y="254.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (807 samples, 12.08%)</title><rect x="308.0" y="227.0" width="142.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.0" y="238.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.04%)</title><rect x="308.0" y="211.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.0" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.04%)</title><rect x="308.0" y="195.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.0" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.04%)</title><rect x="308.0" y="179.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.0" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.04%)</title><rect x="308.0" y="163.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.0" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (3 samples, 0.04%)</title><rect x="308.0" y="147.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="311.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (775 samples, 11.60%)</title><rect x="308.5" y="211.0" width="136.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.5" y="222.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (775 samples, 11.60%)</title><rect x="308.5" y="195.0" width="136.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.5" y="206.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (775 samples, 11.60%)</title><rect x="308.5" y="179.0" width="136.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.5" y="190.0">sun/nio/ch/FileDi..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (23 samples, 0.34%)</title><rect x="312.4" y="163.0" width="4.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="315.4" y="174.0"></text>
</g>
<g>
<title>fdval (6 samples, 0.09%)</title><rect x="315.4" y="147.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="318.4" y="158.0"></text>
</g>
<g>
<title>convertReturnVal (3 samples, 0.04%)</title><rect x="316.5" y="163.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="319.5" y="174.0"></text>
</g>
<g>
<title>write (726 samples, 10.87%)</title><rect x="317.2" y="163.0" width="128.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="320.2" y="174.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (29 samples, 0.43%)</title><rect x="445.4" y="211.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.4" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.13%)</title><rect x="445.8" y="195.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.8" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.04%)</title><rect x="446.3" y="179.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="449.3" y="190.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="447.0" y="179.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="450.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (18 samples, 0.27%)</title><rect x="447.4" y="195.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="450.4" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (3 samples, 0.04%)</title><rect x="449.9" y="179.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="452.9" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (2 samples, 0.03%)</title><rect x="450.0" y="163.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (8 samples, 0.12%)</title><rect x="450.7" y="291.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.7" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (14 samples, 0.21%)</title><rect x="452.1" y="339.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="455.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (10 samples, 0.15%)</title><rect x="452.9" y="323.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="455.9" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.15%)</title><rect x="452.9" y="307.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer$$Lambda$76/150636949.act (1,924 samples, 28.80%)</title><rect x="454.6" y="355.0" width="339.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="457.6" y="366.0">ru/mail/polis/service/prohladenn/MyHttpServer$..</text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer.lambda$entity$0 (1,924 samples, 28.80%)</title><rect x="454.6" y="339.0" width="339.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="457.6" y="350.0">ru/mail/polis/service/prohladenn/MyHttpServer...</text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/HttpServerController.get (1,923 samples, 28.79%)</title><rect x="454.8" y="323.0" width="339.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="457.8" y="334.0">ru/mail/polis/service/prohladenn/HttpServerCon..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.03%)</title><rect x="461.9" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.9" y="318.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.hasNext (4 samples, 0.06%)</title><rect x="462.6" y="307.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="465.6" y="318.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (2 samples, 0.03%)</title><rect x="463.3" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="466.3" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.07%)</title><rect x="464.0" y="307.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="467.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.06%)</title><rect x="464.2" y="291.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="467.2" y="302.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="464.5" y="275.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="467.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (2 samples, 0.03%)</title><rect x="464.9" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="467.9" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="465.4" y="307.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="468.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.get (1,401 samples, 20.97%)</title><rect x="466.1" y="307.0" width="247.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="469.1" y="318.0">one/nio/http/HttpClient.get</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,397 samples, 20.91%)</title><rect x="466.8" y="291.0" width="246.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="469.8" y="302.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,395 samples, 20.88%)</title><rect x="467.2" y="275.0" width="246.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="470.2" y="286.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (781 samples, 11.69%)</title><rect x="467.5" y="259.0" width="138.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="470.5" y="270.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (765 samples, 11.45%)</title><rect x="470.3" y="243.0" width="135.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="473.3" y="254.0">one/nio/net/JavaS..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (763 samples, 11.42%)</title><rect x="470.7" y="227.0" width="134.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="473.7" y="238.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 0.21%)</title><rect x="471.0" y="211.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="474.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (13 samples, 0.19%)</title><rect x="471.2" y="195.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="474.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (9 samples, 0.13%)</title><rect x="471.2" y="179.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="474.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (3 samples, 0.04%)</title><rect x="471.2" y="163.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="474.2" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (3 samples, 0.04%)</title><rect x="471.2" y="147.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="474.2" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (3 samples, 0.04%)</title><rect x="471.2" y="131.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="474.2" y="142.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="471.4" y="115.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="474.4" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (4 samples, 0.06%)</title><rect x="471.8" y="163.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="474.8" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (4 samples, 0.06%)</title><rect x="471.8" y="147.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="474.8" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (4 samples, 0.06%)</title><rect x="471.8" y="131.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="474.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (2 samples, 0.03%)</title><rect x="472.5" y="163.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="475.5" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.03%)</title><rect x="472.5" y="147.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="475.5" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="472.5" y="131.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="475.5" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.06%)</title><rect x="472.8" y="179.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="475.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.04%)</title><rect x="473.0" y="163.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (739 samples, 11.06%)</title><rect x="473.5" y="211.0" width="130.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="476.5" y="222.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (739 samples, 11.06%)</title><rect x="473.5" y="195.0" width="130.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.5" y="206.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (732 samples, 10.96%)</title><rect x="473.7" y="179.0" width="129.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="476.7" y="190.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (731 samples, 10.94%)</title><rect x="473.9" y="163.0" width="129.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="476.9" y="174.0">sun/nio/ch/Socke..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (731 samples, 10.94%)</title><rect x="473.9" y="147.0" width="129.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.9" y="158.0">sun/nio/ch/FileD..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (9 samples, 0.13%)</title><rect x="482.4" y="131.0" width="1.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="485.4" y="142.0"></text>
</g>
<g>
<title>read (674 samples, 10.09%)</title><rect x="483.9" y="131.0" width="119.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="486.9" y="142.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.09%)</title><rect x="603.0" y="179.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="606.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.04%)</title><rect x="603.5" y="163.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="606.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (8 samples, 0.12%)</title><rect x="604.1" y="211.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="607.1" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (4 samples, 0.06%)</title><rect x="604.1" y="195.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="607.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (4 samples, 0.06%)</title><rect x="604.8" y="195.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="607.8" y="206.0"></text>
</g>
<g>
<title>pthread_self (2 samples, 0.03%)</title><rect x="605.1" y="179.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="608.1" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (85 samples, 1.27%)</title><rect x="605.5" y="259.0" width="15.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="608.5" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (57 samples, 0.85%)</title><rect x="607.8" y="243.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="610.8" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (57 samples, 0.85%)</title><rect x="607.8" y="227.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="610.8" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.07%)</title><rect x="610.4" y="211.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="613.4" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.03%)</title><rect x="611.3" y="211.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="614.3" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (35 samples, 0.52%)</title><rect x="611.7" y="211.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="614.7" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (13 samples, 0.19%)</title><rect x="617.8" y="243.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="620.8" y="254.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.16%)</title><rect x="618.2" y="227.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="621.2" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.16%)</title><rect x="618.2" y="211.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="621.2" y="222.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="619.4" y="195.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="622.4" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="619.8" y="195.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="622.8" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="620.1" y="243.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="623.1" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (29 samples, 0.43%)</title><rect x="620.5" y="259.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="623.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3 samples, 0.04%)</title><rect x="621.2" y="243.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.2" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (20 samples, 0.30%)</title><rect x="621.7" y="243.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="624.7" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.04%)</title><rect x="622.1" y="227.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="625.1" y="238.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.03%)</title><rect x="622.3" y="211.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="625.3" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.04%)</title><rect x="622.6" y="227.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="625.6" y="238.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="622.8" y="211.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="625.8" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="622.8" y="195.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="625.8" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.18%)</title><rect x="623.1" y="227.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="626.1" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.16%)</title><rect x="623.3" y="211.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="626.3" y="222.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.09%)</title><rect x="623.7" y="195.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="626.7" y="206.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (3 samples, 0.04%)</title><rect x="624.7" y="195.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="627.7" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.03%)</title><rect x="625.3" y="243.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="628.3" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (15 samples, 0.22%)</title><rect x="625.6" y="259.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="628.6" y="270.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.10%)</title><rect x="627.0" y="243.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="630.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.10%)</title><rect x="627.0" y="227.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="630.0" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="627.9" y="211.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="630.9" y="222.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setTimeout (4 samples, 0.06%)</title><rect x="628.3" y="259.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="631.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (3 samples, 0.04%)</title><rect x="628.4" y="243.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="631.4" y="254.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (464 samples, 6.95%)</title><rect x="629.0" y="259.0" width="81.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="632.0" y="270.0">one/nio/n..</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (351 samples, 5.25%)</title><rect x="629.0" y="243.0" width="62.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="632.0" y="254.0">java/n..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (349 samples, 5.22%)</title><rect x="629.3" y="227.0" width="61.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="632.3" y="238.0">java/n..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (347 samples, 5.19%)</title><rect x="629.7" y="211.0" width="61.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="632.7" y="222.0">java/n..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.03%)</title><rect x="630.2" y="195.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="633.2" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (342 samples, 5.12%)</title><rect x="630.6" y="195.0" width="60.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="633.6" y="206.0">sun/ni..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.12%)</title><rect x="631.3" y="179.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="634.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.12%)</title><rect x="631.3" y="163.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (8 samples, 0.12%)</title><rect x="631.3" y="147.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (8 samples, 0.12%)</title><rect x="631.3" y="131.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="634.3" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="632.3" y="115.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="635.3" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="632.3" y="99.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.3" y="110.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="632.3" y="83.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="635.3" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (320 samples, 4.79%)</title><rect x="632.7" y="179.0" width="56.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.7" y="190.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (319 samples, 4.78%)</title><rect x="632.9" y="163.0" width="56.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="635.9" y="174.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (309 samples, 4.63%)</title><rect x="632.9" y="147.0" width="54.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.9" y="158.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (309 samples, 4.63%)</title><rect x="632.9" y="131.0" width="54.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.9" y="142.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (309 samples, 4.63%)</title><rect x="632.9" y="115.0" width="54.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.9" y="126.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.03%)</title><rect x="635.0" y="99.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="638.0" y="110.0"></text>
</g>
<g>
<title>write (294 samples, 4.40%)</title><rect x="635.5" y="99.0" width="51.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="638.5" y="110.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (10 samples, 0.15%)</title><rect x="687.4" y="147.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="690.4" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.03%)</title><rect x="687.8" y="131.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="690.8" y="142.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="687.8" y="115.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="690.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (6 samples, 0.09%)</title><rect x="688.1" y="131.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="691.1" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (9 samples, 0.13%)</title><rect x="689.2" y="179.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="692.2" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (4 samples, 0.06%)</title><rect x="689.2" y="163.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="692.2" y="174.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.03%)</title><rect x="689.6" y="147.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="692.6" y="158.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.03%)</title><rect x="689.6" y="131.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="692.6" y="142.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.03%)</title><rect x="689.6" y="115.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="692.6" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (5 samples, 0.07%)</title><rect x="689.9" y="163.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="692.9" y="174.0"></text>
</g>
<g>
<title>JNI_OnLoad (2 samples, 0.03%)</title><rect x="689.9" y="147.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="692.9" y="158.0"></text>
</g>
<g>
<title>pthread_self (2 samples, 0.03%)</title><rect x="690.4" y="147.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="693.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (112 samples, 1.68%)</title><rect x="691.0" y="243.0" width="19.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="694.0" y="254.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (110 samples, 1.65%)</title><rect x="691.3" y="227.0" width="19.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="694.3" y="238.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (85 samples, 1.27%)</title><rect x="692.6" y="211.0" width="15.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="695.6" y="222.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (4 samples, 0.06%)</title><rect x="695.0" y="195.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="698.0" y="206.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="695.9" y="195.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="698.9" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (6 samples, 0.09%)</title><rect x="697.0" y="195.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="700.0" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (5 samples, 0.07%)</title><rect x="697.0" y="179.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="700.0" y="190.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (3 samples, 0.04%)</title><rect x="697.3" y="163.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="700.3" y="174.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (10 samples, 0.15%)</title><rect x="698.4" y="195.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="701.4" y="206.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (4 samples, 0.06%)</title><rect x="699.1" y="179.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="702.1" y="190.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="699.3" y="163.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="702.3" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="699.8" y="179.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="702.8" y="190.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (10 samples, 0.15%)</title><rect x="700.3" y="195.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="703.3" y="206.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (9 samples, 0.13%)</title><rect x="700.3" y="179.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="703.3" y="190.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (4 samples, 0.06%)</title><rect x="700.5" y="163.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="703.5" y="174.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.06%)</title><rect x="701.2" y="163.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="704.2" y="174.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.04%)</title><rect x="701.4" y="147.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="704.4" y="158.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (2 samples, 0.03%)</title><rect x="702.1" y="195.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="705.1" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="702.6" y="195.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="705.6" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="702.6" y="179.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="705.6" y="190.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="702.6" y="163.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="705.6" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="702.6" y="147.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="705.6" y="158.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="702.6" y="131.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="705.6" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (2 samples, 0.03%)</title><rect x="702.6" y="115.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="705.6" y="126.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (3 samples, 0.04%)</title><rect x="703.5" y="195.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="706.5" y="206.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (19 samples, 0.28%)</title><rect x="704.0" y="195.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="707.0" y="206.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (6 samples, 0.09%)</title><rect x="704.2" y="179.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="707.2" y="190.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (2 samples, 0.03%)</title><rect x="704.9" y="163.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="707.9" y="174.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (12 samples, 0.18%)</title><rect x="705.3" y="179.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="708.3" y="190.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.04%)</title><rect x="705.6" y="163.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="708.6" y="174.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.03%)</title><rect x="705.8" y="147.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="708.8" y="158.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="705.8" y="131.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="708.8" y="142.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (7 samples, 0.10%)</title><rect x="706.2" y="163.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="709.2" y="174.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (2 samples, 0.03%)</title><rect x="706.7" y="147.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="709.7" y="158.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.06%)</title><rect x="707.6" y="211.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="710.6" y="222.0"></text>
</g>
<g>
<title>call_stub (4 samples, 0.06%)</title><rect x="708.8" y="211.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="711.8" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (2 samples, 0.03%)</title><rect x="710.1" y="211.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="713.1" y="222.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (8 samples, 0.12%)</title><rect x="710.9" y="259.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="713.9" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (3 samples, 0.04%)</title><rect x="711.8" y="243.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="714.8" y="254.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (3 samples, 0.04%)</title><rect x="711.8" y="227.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="714.8" y="238.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (7 samples, 0.10%)</title><rect x="712.3" y="259.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="715.3" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (4 samples, 0.06%)</title><rect x="712.9" y="243.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="715.9" y="254.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (4 samples, 0.06%)</title><rect x="712.9" y="227.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="715.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.06%)</title><rect x="713.6" y="307.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="716.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/HttpServerController.from (38 samples, 0.57%)</title><rect x="714.3" y="307.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.3" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2047000328.linkToTargetMethod (17 samples, 0.25%)</title><rect x="715.0" y="291.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="718.0" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1209380121.invoke (17 samples, 0.25%)</title><rect x="715.0" y="275.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="718.0" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.03%)</title><rect x="715.0" y="259.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="718.0" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1353250682.invokeStatic (2 samples, 0.03%)</title><rect x="715.4" y="259.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="718.4" y="270.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (2 samples, 0.03%)</title><rect x="715.4" y="243.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="718.4" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/914499840.invokeStatic (12 samples, 0.18%)</title><rect x="715.7" y="259.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="718.7" y="270.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (12 samples, 0.18%)</title><rect x="715.7" y="243.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="718.7" y="254.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (12 samples, 0.18%)</title><rect x="715.7" y="227.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="718.7" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (17 samples, 0.25%)</title><rect x="718.0" y="291.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.0" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="719.8" y="275.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="722.8" y="286.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="720.5" y="275.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="723.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/HttpServerController.replicas (9 samples, 0.13%)</title><rect x="721.0" y="307.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.0" y="318.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (2 samples, 0.03%)</title><rect x="721.4" y="291.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="724.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/BasicTopology.all (5 samples, 0.07%)</title><rect x="721.7" y="291.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.7" y="302.0"></text>
</g>
<g>
<title>java/util/Set.of (5 samples, 0.07%)</title><rect x="721.7" y="275.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="724.7" y="286.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$Set12.&lt;init&gt; (2 samples, 0.03%)</title><rect x="721.9" y="259.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="724.9" y="270.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.&lt;init&gt; (2 samples, 0.03%)</title><rect x="722.2" y="259.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="725.2" y="270.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.probe (2 samples, 0.03%)</title><rect x="722.2" y="243.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="725.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/ReplicaFactor.getAck (2 samples, 0.03%)</title><rect x="722.6" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="725.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/Value.from (27 samples, 0.40%)</title><rect x="722.9" y="307.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="725.9" y="318.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (11 samples, 0.16%)</title><rect x="723.1" y="291.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="726.1" y="302.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (11 samples, 0.16%)</title><rect x="723.1" y="275.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="726.1" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.04%)</title><rect x="723.8" y="259.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="726.8" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.04%)</title><rect x="723.8" y="243.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="726.8" y="254.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (3 samples, 0.04%)</title><rect x="723.8" y="227.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="726.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="724.4" y="259.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="727.4" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.03%)</title><rect x="724.4" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="727.4" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (13 samples, 0.19%)</title><rect x="725.1" y="291.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="728.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (10 samples, 0.15%)</title><rect x="725.6" y="275.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="728.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.15%)</title><rect x="725.6" y="259.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="728.6" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="726.8" y="243.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="729.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/Value.present (2 samples, 0.03%)</title><rect x="727.4" y="291.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="730.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/Value.get (363 samples, 5.43%)</title><rect x="727.7" y="307.0" width="64.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.7" y="318.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 0.04%)</title><rect x="727.9" y="291.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.9" y="302.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="728.1" y="275.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="731.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (32 samples, 0.48%)</title><rect x="728.6" y="291.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="731.6" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (19 samples, 0.28%)</title><rect x="728.6" y="275.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.6" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (19 samples, 0.28%)</title><rect x="728.6" y="259.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (19 samples, 0.28%)</title><rect x="728.6" y="243.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="731.6" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (11 samples, 0.16%)</title><rect x="728.6" y="227.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="731.6" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (10 samples, 0.15%)</title><rect x="728.8" y="211.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="731.8" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (4 samples, 0.06%)</title><rect x="728.8" y="195.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="731.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (4 samples, 0.06%)</title><rect x="728.8" y="179.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="731.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (4 samples, 0.06%)</title><rect x="728.8" y="163.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="731.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (4 samples, 0.06%)</title><rect x="728.8" y="147.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (6 samples, 0.09%)</title><rect x="729.5" y="195.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="732.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/LSMDao$$Lambda$90/939557041.apply (3 samples, 0.04%)</title><rect x="729.8" y="179.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="732.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/Cell.getKey (2 samples, 0.03%)</title><rect x="730.0" y="163.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="733.0" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="730.0" y="147.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (6 samples, 0.09%)</title><rect x="730.5" y="227.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="733.5" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.09%)</title><rect x="730.5" y="211.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="733.5" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.06%)</title><rect x="730.9" y="195.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="733.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/MemTablePool$$Lambda$86/1743245022.apply (2 samples, 0.03%)</title><rect x="731.6" y="227.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="734.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/Cell.getKey (2 samples, 0.03%)</title><rect x="731.6" y="211.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="734.6" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="731.6" y="195.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="734.6" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="731.6" y="179.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="734.6" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="731.6" y="163.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="734.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="731.6" y="147.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="734.6" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="731.6" y="131.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="734.6" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (4 samples, 0.06%)</title><rect x="732.0" y="275.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="735.0" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.06%)</title><rect x="732.0" y="259.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="735.0" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="732.3" y="243.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="735.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/LSMDao$$Lambda$90/939557041.apply (8 samples, 0.12%)</title><rect x="732.7" y="275.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="735.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/Cell.getKey (8 samples, 0.12%)</title><rect x="732.7" y="259.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="735.7" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (8 samples, 0.12%)</title><rect x="732.7" y="243.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="735.7" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (5 samples, 0.07%)</title><rect x="733.2" y="227.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="736.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="733.2" y="211.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="736.2" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="733.2" y="195.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="736.2" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="733.2" y="179.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="736.2" y="190.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.03%)</title><rect x="733.2" y="163.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="736.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.04%)</title><rect x="733.5" y="163.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="736.5" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.04%)</title><rect x="733.5" y="147.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="736.5" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.04%)</title><rect x="733.5" y="131.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="736.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/LSMDao.latestIterator (324 samples, 4.85%)</title><rect x="734.3" y="291.0" width="57.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="737.3" y="302.0">ru/mai..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (8 samples, 0.12%)</title><rect x="734.4" y="275.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="737.4" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (7 samples, 0.10%)</title><rect x="734.6" y="259.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="737.6" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (3 samples, 0.04%)</title><rect x="734.8" y="243.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="737.8" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.04%)</title><rect x="735.3" y="243.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="738.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (37 samples, 0.55%)</title><rect x="736.0" y="275.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="739.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (37 samples, 0.55%)</title><rect x="736.0" y="259.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="739.0" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (36 samples, 0.54%)</title><rect x="736.2" y="243.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="739.2" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (36 samples, 0.54%)</title><rect x="736.2" y="227.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="739.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (36 samples, 0.54%)</title><rect x="736.2" y="211.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="739.2" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (26 samples, 0.39%)</title><rect x="736.2" y="195.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="739.2" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (26 samples, 0.39%)</title><rect x="736.2" y="179.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.2" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (7 samples, 0.10%)</title><rect x="736.4" y="163.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="739.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (5 samples, 0.07%)</title><rect x="736.7" y="147.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="739.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (5 samples, 0.07%)</title><rect x="736.7" y="131.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="739.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (5 samples, 0.07%)</title><rect x="736.7" y="115.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="739.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (18 samples, 0.27%)</title><rect x="737.6" y="163.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (6 samples, 0.09%)</title><rect x="737.8" y="147.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="740.8" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.03%)</title><rect x="738.5" y="131.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="741.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/LSMDao$$Lambda$90/939557041.apply (9 samples, 0.13%)</title><rect x="738.8" y="147.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="741.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/Cell.getKey (9 samples, 0.13%)</title><rect x="738.8" y="131.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="741.8" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (9 samples, 0.13%)</title><rect x="738.8" y="115.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="741.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/MemTablePool$$Lambda$86/1743245022.apply (2 samples, 0.03%)</title><rect x="740.4" y="147.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="743.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/Cell.getKey (2 samples, 0.03%)</title><rect x="740.4" y="131.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="743.4" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="740.4" y="115.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (4 samples, 0.06%)</title><rect x="740.8" y="195.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="743.8" y="206.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.06%)</title><rect x="740.8" y="179.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="743.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/LSMDao$$Lambda$90/939557041.apply (2 samples, 0.03%)</title><rect x="741.5" y="195.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="744.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/MemTablePool$$Lambda$86/1743245022.apply (4 samples, 0.06%)</title><rect x="741.8" y="195.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="744.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/Cell.getKey (4 samples, 0.06%)</title><rect x="741.8" y="179.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="744.8" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.06%)</title><rect x="741.8" y="163.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="744.8" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (4 samples, 0.06%)</title><rect x="741.8" y="147.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="744.8" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="741.8" y="131.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="744.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="741.8" y="115.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="744.8" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="741.8" y="99.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="744.8" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.04%)</title><rect x="742.0" y="83.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="745.0" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="742.2" y="67.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="745.2" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/MemTablePool.iterator (277 samples, 4.15%)</title><rect x="742.6" y="275.0" width="48.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="745.6" y="286.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (4 samples, 0.06%)</title><rect x="744.5" y="259.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="747.5" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 0.04%)</title><rect x="745.2" y="259.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="748.2" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (6 samples, 0.09%)</title><rect x="745.7" y="259.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="748.7" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (6 samples, 0.09%)</title><rect x="745.7" y="243.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="748.7" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (2 samples, 0.03%)</title><rect x="746.1" y="227.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="749.1" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.checkForComodification (2 samples, 0.03%)</title><rect x="746.1" y="211.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="749.1" y="222.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (6 samples, 0.09%)</title><rect x="746.8" y="259.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="749.8" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (5 samples, 0.07%)</title><rect x="747.0" y="243.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="750.0" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (4 samples, 0.06%)</title><rect x="747.1" y="227.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="750.1" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.&lt;init&gt; (4 samples, 0.06%)</title><rect x="747.1" y="211.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="750.1" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (4 samples, 0.06%)</title><rect x="747.1" y="195.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="750.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (8 samples, 0.12%)</title><rect x="748.2" y="259.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="751.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (8 samples, 0.12%)</title><rect x="748.2" y="243.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="751.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (6 samples, 0.09%)</title><rect x="748.2" y="227.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="751.2" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.04%)</title><rect x="748.4" y="211.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="751.4" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.03%)</title><rect x="748.6" y="195.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="751.6" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/HttpServerController.from (2 samples, 0.03%)</title><rect x="749.3" y="227.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="752.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock.readLock (2 samples, 0.03%)</title><rect x="749.8" y="259.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="752.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock.readLock (2 samples, 0.03%)</title><rect x="749.8" y="243.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="752.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (29 samples, 0.43%)</title><rect x="750.3" y="259.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="753.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (28 samples, 0.42%)</title><rect x="750.5" y="243.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="753.5" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (28 samples, 0.42%)</title><rect x="750.5" y="227.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="753.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (28 samples, 0.42%)</title><rect x="750.5" y="211.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="753.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (28 samples, 0.42%)</title><rect x="750.5" y="195.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="753.5" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (28 samples, 0.42%)</title><rect x="750.5" y="179.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="753.5" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (27 samples, 0.40%)</title><rect x="750.7" y="163.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="753.7" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (8 samples, 0.12%)</title><rect x="750.7" y="147.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="753.7" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (4 samples, 0.06%)</title><rect x="750.7" y="131.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="753.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/MemTable$$Lambda$79/77014673.apply (4 samples, 0.06%)</title><rect x="750.7" y="115.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="753.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/MemTable.lambda$iterator$0 (4 samples, 0.06%)</title><rect x="750.7" y="99.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="753.7" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/Cell.&lt;init&gt; (4 samples, 0.06%)</title><rect x="750.7" y="83.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="753.7" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (4 samples, 0.06%)</title><rect x="751.4" y="131.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="754.4" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (4 samples, 0.06%)</title><rect x="751.4" y="115.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="754.4" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (4 samples, 0.06%)</title><rect x="751.4" y="99.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="754.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (19 samples, 0.28%)</title><rect x="752.1" y="147.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="755.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/LSMDao$$Lambda$90/939557041.apply (8 samples, 0.12%)</title><rect x="752.6" y="131.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="755.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/Cell.getKey (8 samples, 0.12%)</title><rect x="752.6" y="115.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="755.6" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7 samples, 0.10%)</title><rect x="752.8" y="99.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="755.8" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="753.5" y="83.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="756.5" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="753.7" y="67.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="756.7" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/MemTablePool$$Lambda$86/1743245022.apply (8 samples, 0.12%)</title><rect x="754.0" y="131.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="757.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/MemTable.iterator (204 samples, 3.05%)</title><rect x="755.4" y="259.0" width="36.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="758.4" y="270.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (199 samples, 2.98%)</title><rect x="755.6" y="243.0" width="35.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="758.6" y="254.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (199 samples, 2.98%)</title><rect x="755.6" y="227.0" width="35.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.6" y="238.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (199 samples, 2.98%)</title><rect x="755.6" y="211.0" width="35.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="758.6" y="222.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (10 samples, 0.15%)</title><rect x="756.0" y="195.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="759.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (10 samples, 0.15%)</title><rect x="756.0" y="179.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="759.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (10 samples, 0.15%)</title><rect x="756.0" y="163.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="759.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.10%)</title><rect x="756.5" y="147.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="759.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.10%)</title><rect x="756.5" y="131.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="759.5" y="142.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.09%)</title><rect x="756.5" y="115.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="759.5" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (187 samples, 2.80%)</title><rect x="757.7" y="195.0" width="33.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.7" y="206.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (187 samples, 2.80%)</title><rect x="757.7" y="179.0" width="33.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.7" y="190.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (23 samples, 0.34%)</title><rect x="758.3" y="163.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="761.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (23 samples, 0.34%)</title><rect x="758.3" y="147.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="761.3" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (17 samples, 0.25%)</title><rect x="759.3" y="131.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="762.3" y="142.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (10 samples, 0.15%)</title><rect x="760.2" y="115.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="763.2" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.06%)</title><rect x="761.3" y="99.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="764.3" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="762.0" y="115.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="765.0" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title><rect x="762.0" y="99.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="765.0" y="110.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="762.0" y="83.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="765.0" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (161 samples, 2.41%)</title><rect x="762.3" y="163.0" width="28.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="765.3" y="174.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (101 samples, 1.51%)</title><rect x="772.9" y="147.0" width="17.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="775.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (96 samples, 1.44%)</title><rect x="773.8" y="131.0" width="17.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="776.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (59 samples, 0.88%)</title><rect x="780.4" y="115.0" width="10.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="783.4" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.09%)</title><rect x="781.4" y="99.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.4" y="110.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (33 samples, 0.49%)</title><rect x="782.7" y="99.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="785.7" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (8 samples, 0.12%)</title><rect x="787.1" y="83.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="790.1" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title><rect x="788.0" y="67.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.0" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (13 samples, 0.19%)</title><rect x="788.5" y="99.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="791.5" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (12 samples, 0.18%)</title><rect x="788.7" y="83.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="791.7" y="94.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.12%)</title><rect x="789.4" y="67.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="792.4" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (4 samples, 0.06%)</title><rect x="790.8" y="243.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="793.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (4 samples, 0.06%)</title><rect x="790.8" y="227.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="793.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (4 samples, 0.06%)</title><rect x="790.8" y="211.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (4 samples, 0.06%)</title><rect x="790.8" y="195.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="793.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/Value.present (2 samples, 0.03%)</title><rect x="791.5" y="291.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="794.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/Value.&lt;init&gt; (2 samples, 0.03%)</title><rect x="791.5" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="794.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/Value.merge (14 samples, 0.21%)</title><rect x="791.8" y="307.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="794.8" y="318.0"></text>
</g>
<g>
<title>java/util/Collection.stream (6 samples, 0.09%)</title><rect x="791.8" y="291.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="794.8" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (6 samples, 0.09%)</title><rect x="791.8" y="275.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="794.8" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (3 samples, 0.04%)</title><rect x="791.8" y="259.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="794.8" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (3 samples, 0.04%)</title><rect x="791.8" y="243.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="794.8" y="254.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (3 samples, 0.04%)</title><rect x="791.8" y="227.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="794.8" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (3 samples, 0.04%)</title><rect x="792.4" y="259.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="795.4" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (8 samples, 0.12%)</title><rect x="792.9" y="291.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="795.9" y="302.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator.maxBy (3 samples, 0.04%)</title><rect x="793.3" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="796.3" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (3 samples, 0.04%)</title><rect x="793.8" y="275.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="796.8" y="286.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.04%)</title><rect x="793.8" y="259.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="796.8" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.04%)</title><rect x="793.8" y="243.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.8" y="254.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.04%)</title><rect x="793.8" y="227.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="796.8" y="238.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.04%)</title><rect x="793.8" y="211.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="796.8" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (3 samples, 0.04%)</title><rect x="793.8" y="195.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="796.8" y="206.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,224 samples, 33.29%)</title><rect x="794.5" y="435.0" width="392.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.5" y="446.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.04%)</title><rect x="796.1" y="419.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="799.1" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (3 samples, 0.04%)</title><rect x="796.1" y="403.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="799.1" y="414.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="796.1" y="387.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="799.1" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.03%)</title><rect x="797.0" y="419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="800.0" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.03%)</title><rect x="797.0" y="403.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="800.0" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,372 samples, 20.54%)</title><rect x="797.5" y="419.0" width="242.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="800.5" y="430.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (11 samples, 0.16%)</title><rect x="798.2" y="403.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="801.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.03%)</title><rect x="799.8" y="387.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="802.8" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.03%)</title><rect x="799.8" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="802.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.03%)</title><rect x="799.8" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="799.8" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="802.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="799.8" y="323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="802.8" y="334.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (12 samples, 0.18%)</title><rect x="800.1" y="403.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="803.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (11 samples, 0.16%)</title><rect x="800.3" y="387.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.3" y="398.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.03%)</title><rect x="802.3" y="403.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="805.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1,341 samples, 20.07%)</title><rect x="802.6" y="403.0" width="236.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="805.6" y="414.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,341 samples, 20.07%)</title><rect x="802.6" y="387.0" width="236.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="805.6" y="398.0">sun/nio/ch/SelectorImpl.lockAnd..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,337 samples, 20.01%)</title><rect x="803.3" y="371.0" width="236.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="806.3" y="382.0">sun/nio/ch/KQueueSelectorImpl.d..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (1,249 samples, 18.70%)</title><rect x="803.7" y="355.0" width="220.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="806.7" y="366.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (11 samples, 0.16%)</title><rect x="811.8" y="339.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="814.8" y="350.0"></text>
</g>
<g>
<title>kevent (1,192 samples, 17.84%)</title><rect x="813.7" y="339.0" width="210.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="816.7" y="350.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (37 samples, 0.55%)</title><rect x="1024.3" y="355.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1027.3" y="366.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (2 samples, 0.03%)</title><rect x="1025.5" y="339.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1028.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.07%)</title><rect x="1025.9" y="339.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1028.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.07%)</title><rect x="1025.9" y="323.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1028.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="1026.8" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1029.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (21 samples, 0.31%)</title><rect x="1027.1" y="339.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1030.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (16 samples, 0.24%)</title><rect x="1027.3" y="323.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1030.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (16 samples, 0.24%)</title><rect x="1027.3" y="307.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1030.3" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (16 samples, 0.24%)</title><rect x="1027.3" y="291.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1030.3" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.13%)</title><rect x="1028.5" y="275.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1031.5" y="286.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (3 samples, 0.04%)</title><rect x="1030.1" y="323.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1033.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.03%)</title><rect x="1030.3" y="307.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1033.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (15 samples, 0.22%)</title><rect x="1030.8" y="355.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1033.8" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (9 samples, 0.13%)</title><rect x="1031.9" y="339.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1034.9" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (2 samples, 0.03%)</title><rect x="1033.1" y="323.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1036.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (17 samples, 0.25%)</title><rect x="1033.5" y="355.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1036.5" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (17 samples, 0.25%)</title><rect x="1033.5" y="339.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1036.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.04%)</title><rect x="1033.5" y="323.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1036.5" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (14 samples, 0.21%)</title><rect x="1034.0" y="323.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1037.0" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (14 samples, 0.21%)</title><rect x="1034.0" y="307.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1037.0" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (14 samples, 0.21%)</title><rect x="1034.0" y="291.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1037.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (6 samples, 0.09%)</title><rect x="1036.5" y="355.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1039.5" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (6 samples, 0.09%)</title><rect x="1036.5" y="339.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1039.5" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.09%)</title><rect x="1036.5" y="323.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1039.5" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.09%)</title><rect x="1036.5" y="307.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1039.5" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.09%)</title><rect x="1036.5" y="291.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1039.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (11 samples, 0.16%)</title><rect x="1037.6" y="355.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1040.6" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (2 samples, 0.03%)</title><rect x="1038.6" y="339.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1041.6" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.04%)</title><rect x="1039.0" y="339.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1042.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.04%)</title><rect x="1039.0" y="323.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1042.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.03%)</title><rect x="1039.5" y="403.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1042.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.03%)</title><rect x="1039.5" y="387.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1042.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.03%)</title><rect x="1039.5" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1042.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (833 samples, 12.47%)</title><rect x="1039.9" y="419.0" width="147.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1042.9" y="430.0">one/nio/net/Session..</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="1040.9" y="403.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1043.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (812 samples, 12.16%)</title><rect x="1041.4" y="403.0" width="143.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1044.4" y="414.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (556 samples, 8.32%)</title><rect x="1042.3" y="387.0" width="98.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1045.3" y="398.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (458 samples, 6.86%)</title><rect x="1048.7" y="371.0" width="80.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1051.7" y="382.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (450 samples, 6.74%)</title><rect x="1050.1" y="355.0" width="79.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1053.1" y="366.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (432 samples, 6.47%)</title><rect x="1050.3" y="339.0" width="76.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1053.3" y="350.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (38 samples, 0.57%)</title><rect x="1050.4" y="323.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1053.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.12%)</title><rect x="1054.3" y="307.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1057.3" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.12%)</title><rect x="1054.3" y="291.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1057.3" y="302.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.09%)</title><rect x="1054.7" y="275.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1057.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="1055.7" y="307.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1058.7" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="1055.7" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1058.7" y="302.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.07%)</title><rect x="1056.3" y="307.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1059.3" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1056.8" y="291.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1059.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1056.8" y="275.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1059.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="1056.8" y="259.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1059.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer.entity (393 samples, 5.88%)</title><rect x="1057.2" y="323.0" width="69.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1060.2" y="334.0">ru/mail..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (13 samples, 0.19%)</title><rect x="1057.9" y="307.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1060.9" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.07%)</title><rect x="1058.8" y="291.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1061.8" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.07%)</title><rect x="1058.8" y="275.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1061.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.04%)</title><rect x="1059.6" y="291.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1062.6" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.04%)</title><rect x="1059.6" y="275.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1062.6" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.04%)</title><rect x="1059.6" y="259.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1062.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/BasicTopology.all (18 samples, 0.27%)</title><rect x="1060.2" y="307.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1063.2" y="318.0"></text>
</g>
<g>
<title>java/util/Set.of (18 samples, 0.27%)</title><rect x="1060.2" y="291.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1063.2" y="302.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$Set12.&lt;init&gt; (6 samples, 0.09%)</title><rect x="1060.5" y="275.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1063.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.03%)</title><rect x="1061.2" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1064.2" y="270.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.&lt;init&gt; (10 samples, 0.15%)</title><rect x="1061.6" y="275.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1064.6" y="286.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.probe (10 samples, 0.15%)</title><rect x="1061.6" y="259.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1064.6" y="270.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.07%)</title><rect x="1062.5" y="243.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1065.5" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.07%)</title><rect x="1062.5" y="227.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1065.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer.executeAsync (358 samples, 5.36%)</title><rect x="1063.3" y="307.0" width="63.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1066.3" y="318.0">ru/mail..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.06%)</title><rect x="1063.3" y="291.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1066.3" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.06%)</title><rect x="1063.3" y="275.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1066.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer$$Lambda$73/922451766.get$Lambda (4 samples, 0.06%)</title><rect x="1063.3" y="259.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1066.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (354 samples, 5.30%)</title><rect x="1064.1" y="291.0" width="62.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1067.1" y="302.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (354 samples, 5.30%)</title><rect x="1064.1" y="275.0" width="62.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1067.1" y="286.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (322 samples, 4.82%)</title><rect x="1064.4" y="259.0" width="56.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1067.4" y="270.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="1064.4" y="243.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1067.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="1064.4" y="227.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1067.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="1064.4" y="211.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1067.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="1064.4" y="195.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1067.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="1064.4" y="179.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1067.4" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="1064.4" y="163.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1067.4" y="174.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.03%)</title><rect x="1064.4" y="147.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1067.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (320 samples, 4.79%)</title><rect x="1064.8" y="243.0" width="56.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1067.8" y="254.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (320 samples, 4.79%)</title><rect x="1064.8" y="227.0" width="56.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1067.8" y="238.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (320 samples, 4.79%)</title><rect x="1064.8" y="211.0" width="56.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1067.8" y="222.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (320 samples, 4.79%)</title><rect x="1064.8" y="195.0" width="56.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1067.8" y="206.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (320 samples, 4.79%)</title><rect x="1064.8" y="179.0" width="56.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1067.8" y="190.0">jdk/in..</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (2 samples, 0.03%)</title><rect x="1067.2" y="163.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.2" y="174.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.04%)</title><rect x="1067.6" y="163.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.6" y="174.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.04%)</title><rect x="1068.3" y="163.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.3" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.03%)</title><rect x="1069.2" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1072.2" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (289 samples, 4.33%)</title><rect x="1069.7" y="163.0" width="51.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1072.7" y="174.0">Unsaf..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="1070.2" y="147.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.2" y="158.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.06%)</title><rect x="1070.8" y="147.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1073.8" y="158.0"></text>
</g>
<g>
<title>Chunk::next() const (3 samples, 0.04%)</title><rect x="1070.9" y="131.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1073.9" y="142.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.03%)</title><rect x="1071.5" y="147.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.5" y="158.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (2 samples, 0.03%)</title><rect x="1071.8" y="147.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1074.8" y="158.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.03%)</title><rect x="1072.4" y="147.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1075.4" y="158.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (8 samples, 0.12%)</title><rect x="1072.7" y="147.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1075.7" y="158.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (8 samples, 0.12%)</title><rect x="1072.7" y="131.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1075.7" y="142.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (8 samples, 0.12%)</title><rect x="1072.7" y="115.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1075.7" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (8 samples, 0.12%)</title><rect x="1072.7" y="99.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.7" y="110.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (7 samples, 0.10%)</title><rect x="1072.9" y="83.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.9" y="94.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (5 samples, 0.07%)</title><rect x="1073.2" y="67.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.2" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (5 samples, 0.07%)</title><rect x="1073.2" y="51.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1076.2" y="62.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (5 samples, 0.07%)</title><rect x="1073.2" y="35.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.2" y="46.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="1074.1" y="147.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1077.1" y="158.0"></text>
</g>
<g>
<title>Thread::current() (9 samples, 0.13%)</title><rect x="1074.6" y="147.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1077.6" y="158.0"></text>
</g>
<g>
<title>Thread::current_or_null() (4 samples, 0.06%)</title><rect x="1074.6" y="131.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1077.6" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.07%)</title><rect x="1075.4" y="131.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1078.4" y="142.0"></text>
</g>
<g>
<title>Thread::current_or_null() (3 samples, 0.04%)</title><rect x="1076.2" y="147.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.2" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.06%)</title><rect x="1076.9" y="147.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.9" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="1077.1" y="131.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.1" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="1077.1" y="115.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1080.1" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="1077.1" y="99.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.1" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="1077.1" y="83.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.1" y="94.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (10 samples, 0.15%)</title><rect x="1077.7" y="147.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.7" y="158.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="1077.7" y="131.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1080.7" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.07%)</title><rect x="1078.2" y="131.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.2" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="1078.4" y="115.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1081.4" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.06%)</title><rect x="1078.4" y="99.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.4" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="1078.7" y="83.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1081.7" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.03%)</title><rect x="1079.4" y="147.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1082.4" y="158.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (2 samples, 0.03%)</title><rect x="1079.4" y="131.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1082.4" y="142.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (7 samples, 0.10%)</title><rect x="1079.8" y="147.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.8" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (196 samples, 2.93%)</title><rect x="1081.2" y="147.0" width="34.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1084.2" y="158.0">__..</text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.03%)</title><rect x="1115.8" y="147.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.8" y="158.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.06%)</title><rect x="1116.2" y="147.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.2" y="158.0"></text>
</g>
<g>
<title>pthread_cond_signal (13 samples, 0.19%)</title><rect x="1116.9" y="147.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1119.9" y="158.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (9 samples, 0.13%)</title><rect x="1117.6" y="131.0" width="1.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1120.6" y="142.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np (2 samples, 0.03%)</title><rect x="1119.2" y="147.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1122.2" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_lock (7 samples, 0.10%)</title><rect x="1119.5" y="147.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1122.5" y="158.0"></text>
</g>
<g>
<title>addr_from_java(long) (2 samples, 0.03%)</title><rect x="1120.8" y="163.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1123.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.07%)</title><rect x="1121.3" y="259.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1124.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.07%)</title><rect x="1121.3" y="243.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1124.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.03%)</title><rect x="1121.8" y="227.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1124.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.03%)</title><rect x="1121.8" y="211.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1124.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (2 samples, 0.03%)</title><rect x="1121.8" y="195.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1124.8" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.03%)</title><rect x="1121.8" y="179.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1124.8" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="1121.8" y="163.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1124.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (22 samples, 0.33%)</title><rect x="1122.2" y="259.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1125.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (22 samples, 0.33%)</title><rect x="1122.2" y="243.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1125.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="1122.9" y="227.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1125.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="1122.9" y="211.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1125.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="1122.9" y="195.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1125.9" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="1122.9" y="179.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1125.9" y="190.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.03%)</title><rect x="1122.9" y="163.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1125.9" y="174.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.03%)</title><rect x="1122.9" y="147.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.9" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="1122.9" y="131.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1125.9" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (9 samples, 0.13%)</title><rect x="1123.2" y="227.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1126.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (5 samples, 0.07%)</title><rect x="1123.8" y="211.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1126.8" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.07%)</title><rect x="1123.8" y="195.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1126.8" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (3 samples, 0.04%)</title><rect x="1124.1" y="179.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1127.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.10%)</title><rect x="1124.8" y="227.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1127.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.10%)</title><rect x="1124.8" y="211.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1127.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.07%)</title><rect x="1125.2" y="195.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1128.2" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.07%)</title><rect x="1125.2" y="179.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1128.2" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (5 samples, 0.07%)</title><rect x="1125.2" y="163.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1128.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.04%)</title><rect x="1126.1" y="259.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1129.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.04%)</title><rect x="1126.1" y="243.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1129.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.04%)</title><rect x="1126.1" y="227.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1129.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (11 samples, 0.16%)</title><rect x="1126.8" y="339.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1129.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.15%)</title><rect x="1126.9" y="323.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1129.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.09%)</title><rect x="1126.9" y="307.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1129.9" y="318.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.06%)</title><rect x="1127.3" y="291.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1130.3" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.06%)</title><rect x="1128.0" y="307.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1131.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.06%)</title><rect x="1128.0" y="291.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1131.0" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.06%)</title><rect x="1128.9" y="339.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1131.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="1129.2" y="323.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1132.2" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="1129.2" y="307.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1132.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (18 samples, 0.27%)</title><rect x="1129.6" y="371.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1132.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.10%)</title><rect x="1130.3" y="355.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1133.3" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.10%)</title><rect x="1130.3" y="339.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1133.3" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (7 samples, 0.10%)</title><rect x="1131.5" y="355.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1134.5" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (22 samples, 0.33%)</title><rect x="1132.9" y="371.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1135.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.13%)</title><rect x="1135.2" y="355.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1138.2" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.13%)</title><rect x="1135.2" y="339.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1138.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (20 samples, 0.30%)</title><rect x="1137.0" y="371.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1140.0" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.24%)</title><rect x="1137.7" y="355.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1140.7" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (251 samples, 3.76%)</title><rect x="1140.5" y="387.0" width="44.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1143.5" y="398.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (244 samples, 3.65%)</title><rect x="1141.4" y="371.0" width="43.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1144.4" y="382.0">one/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (243 samples, 3.64%)</title><rect x="1141.6" y="355.0" width="42.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1144.6" y="366.0">sun/..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.isBlocking (2 samples, 0.03%)</title><rect x="1141.6" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1144.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (16 samples, 0.24%)</title><rect x="1142.0" y="339.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1145.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (16 samples, 0.24%)</title><rect x="1142.0" y="323.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1145.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (11 samples, 0.16%)</title><rect x="1142.0" y="307.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1145.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (11 samples, 0.16%)</title><rect x="1142.0" y="291.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1145.0" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (11 samples, 0.16%)</title><rect x="1142.0" y="275.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1145.0" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (10 samples, 0.15%)</title><rect x="1142.1" y="259.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1145.1" y="270.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (6 samples, 0.09%)</title><rect x="1142.8" y="243.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1145.8" y="254.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="1143.4" y="227.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1146.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.07%)</title><rect x="1143.9" y="307.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1146.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.06%)</title><rect x="1144.1" y="291.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1147.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="1144.1" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1147.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="1144.4" y="275.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1147.4" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="1144.4" y="259.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1147.4" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="1144.4" y="243.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1147.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (218 samples, 3.26%)</title><rect x="1144.8" y="339.0" width="38.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1147.8" y="350.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (218 samples, 3.26%)</title><rect x="1144.8" y="323.0" width="38.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1147.8" y="334.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (214 samples, 3.20%)</title><rect x="1144.8" y="307.0" width="37.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1147.8" y="318.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (214 samples, 3.20%)</title><rect x="1144.8" y="291.0" width="37.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1147.8" y="302.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (214 samples, 3.20%)</title><rect x="1144.8" y="275.0" width="37.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1147.8" y="286.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (11 samples, 0.16%)</title><rect x="1148.0" y="259.0" width="1.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1151.0" y="270.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.06%)</title><rect x="1149.2" y="243.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1152.2" y="254.0"></text>
</g>
<g>
<title>read (185 samples, 2.77%)</title><rect x="1149.9" y="259.0" width="32.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1152.9" y="270.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.04%)</title><rect x="1182.6" y="307.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1185.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.04%)</title><rect x="1182.6" y="291.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1185.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (7 samples, 0.10%)</title><rect x="1183.3" y="339.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1186.3" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (7 samples, 0.10%)</title><rect x="1183.3" y="323.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1186.3" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.10%)</title><rect x="1183.3" y="307.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1186.3" y="318.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (7 samples, 0.10%)</title><rect x="1183.3" y="291.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1186.3" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (7 samples, 0.10%)</title><rect x="1183.3" y="275.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1186.3" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.03%)</title><rect x="1184.5" y="371.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1187.5" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.18%)</title><rect x="1184.9" y="403.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.9" y="414.0"></text>
</g>
<g>
<title>__vsnprintf_chk (4 samples, 0.06%)</title><rect x="1184.9" y="387.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1187.9" y="398.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="1185.6" y="387.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1188.6" y="398.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="1185.6" y="371.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1188.6" y="382.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (6 samples, 0.09%)</title><rect x="1185.9" y="387.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1188.9" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="1187.0" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.0" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.06%)</title><rect x="1187.4" y="435.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.4" y="446.0"></text>
</g>
<g>
<title>thread_start (11 samples, 0.16%)</title><rect x="1188.1" y="435.0" width="1.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1191.1" y="446.0"></text>
</g>
<g>
<title>_pthread_start (11 samples, 0.16%)</title><rect x="1188.1" y="419.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1191.1" y="430.0"></text>
</g>
<g>
<title>_pthread_body (11 samples, 0.16%)</title><rect x="1188.1" y="403.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1191.1" y="414.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (11 samples, 0.16%)</title><rect x="1188.1" y="387.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1191.1" y="398.0"></text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 0.10%)</title><rect x="1188.1" y="371.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.1" y="382.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 0.07%)</title><rect x="1188.1" y="355.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.1" y="366.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.06%)</title><rect x="1188.1" y="339.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.1" y="350.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.04%)</title><rect x="1188.1" y="323.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.1" y="334.0"></text>
</g>
<g>
<title>xdrrec_ops (2 samples, 0.03%)</title><rect x="1188.2" y="307.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1191.2" y="318.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (2 samples, 0.03%)</title><rect x="1188.9" y="355.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="366.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (2 samples, 0.03%)</title><rect x="1188.9" y="339.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1191.9" y="350.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.04%)</title><rect x="1189.3" y="371.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.3" y="382.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.04%)</title><rect x="1189.3" y="355.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.3" y="366.0"></text>
</g>
</g>
</svg>
