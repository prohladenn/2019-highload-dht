<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="453"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="453"> </text>
<g id="frames">
<g>
<title>all (7,063 samples, 100.00%)</title><rect x="10.0" y="419.0" width="1180.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="13.0" y="430.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (32 samples, 0.45%)</title><rect x="10.2" y="403.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.2" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (3 samples, 0.04%)</title><rect x="10.5" y="387.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.5" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="10.5" y="371.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.5" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="10.5" y="355.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.5" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="10.7" y="339.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.7" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="10.7" y="323.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.7" y="334.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (27 samples, 0.38%)</title><rect x="11.0" y="387.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.0" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (25 samples, 0.35%)</title><rect x="11.3" y="371.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.3" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (23 samples, 0.33%)</title><rect x="11.5" y="355.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.5" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (13 samples, 0.18%)</title><rect x="12.3" y="339.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.3" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (5 samples, 0.07%)</title><rect x="12.3" y="323.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.3" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (4 samples, 0.06%)</title><rect x="12.3" y="307.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.3" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (7 samples, 0.10%)</title><rect x="13.2" y="323.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.2" y="334.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (2 samples, 0.03%)</title><rect x="13.7" y="307.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="16.7" y="318.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="14.0" y="307.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="17.0" y="318.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.06%)</title><rect x="14.5" y="339.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.5" y="350.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (4 samples, 0.06%)</title><rect x="14.5" y="323.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="17.5" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.06%)</title><rect x="15.5" y="403.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="18.5" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.06%)</title><rect x="15.5" y="387.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="18.5" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.06%)</title><rect x="15.5" y="371.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.5" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.06%)</title><rect x="15.5" y="355.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.5" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.06%)</title><rect x="15.5" y="339.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.5" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="15.7" y="323.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="18.7" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (6 samples, 0.08%)</title><rect x="16.2" y="403.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="19.2" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (5 samples, 0.07%)</title><rect x="16.3" y="387.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.3" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (5 samples, 0.07%)</title><rect x="16.3" y="371.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="19.3" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.07%)</title><rect x="16.3" y="355.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.3" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="16.5" y="339.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="19.5" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="16.5" y="323.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="19.5" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (32 samples, 0.45%)</title><rect x="17.2" y="403.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="20.2" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (30 samples, 0.42%)</title><rect x="17.4" y="387.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="20.4" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (18 samples, 0.25%)</title><rect x="18.0" y="371.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="21.0" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (17 samples, 0.24%)</title><rect x="18.2" y="355.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.2" y="366.0"></text>
</g>
<g>
<title>__gettimeofday (2 samples, 0.03%)</title><rect x="18.2" y="339.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="21.2" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (14 samples, 0.20%)</title><rect x="18.5" y="339.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="21.5" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (8 samples, 0.11%)</title><rect x="21.0" y="371.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="24.0" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.04%)</title><rect x="21.9" y="355.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="24.9" y="366.0"></text>
</g>
<g>
<title>[not_walkable] (3 samples, 0.04%)</title><rect x="22.5" y="403.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="25.5" y="414.0"></text>
</g>
<g>
<title>[not_walkable_Java] (11 samples, 0.16%)</title><rect x="23.0" y="403.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="26.0" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.08%)</title><rect x="23.5" y="387.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="26.5" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.07%)</title><rect x="23.7" y="371.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.7" y="382.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.07%)</title><rect x="23.7" y="355.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="26.7" y="366.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (5 samples, 0.07%)</title><rect x="23.7" y="339.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="26.7" y="350.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.03%)</title><rect x="24.2" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="27.2" y="334.0"></text>
</g>
<g>
<title>[unknown_Java] (57 samples, 0.81%)</title><rect x="24.9" y="403.0" width="9.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="27.9" y="414.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (5 samples, 0.07%)</title><rect x="33.6" y="387.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="36.6" y="398.0"></text>
</g>
<g>
<title>_res (5 samples, 0.07%)</title><rect x="33.6" y="371.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="36.6" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.run (4,392 samples, 62.18%)</title><rect x="34.4" y="403.0" width="733.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="37.4" y="414.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4,392 samples, 62.18%)</title><rect x="34.4" y="387.0" width="733.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.4" y="398.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (4,392 samples, 62.18%)</title><rect x="34.4" y="371.0" width="733.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="37.4" y="382.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.03%)</title><rect x="36.2" y="355.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="39.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="36.2" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.03%)</title><rect x="36.2" y="323.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,548 samples, 21.92%)</title><rect x="36.6" y="355.0" width="258.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="39.6" y="366.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1,548 samples, 21.92%)</title><rect x="36.6" y="339.0" width="258.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.6" y="350.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,424 samples, 20.16%)</title><rect x="36.7" y="323.0" width="237.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="39.7" y="334.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (11 samples, 0.16%)</title><rect x="36.9" y="307.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (6 samples, 0.08%)</title><rect x="38.7" y="307.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (14 samples, 0.20%)</title><rect x="39.9" y="307.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (9 samples, 0.13%)</title><rect x="40.7" y="291.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="43.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 0.13%)</title><rect x="40.7" y="275.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="43.7" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (9 samples, 0.13%)</title><rect x="40.7" y="259.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.7" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.10%)</title><rect x="41.1" y="243.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="44.1" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.10%)</title><rect x="41.1" y="227.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="44.1" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.10%)</title><rect x="41.1" y="211.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="44.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (28 samples, 0.40%)</title><rect x="42.2" y="307.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="45.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 0.40%)</title><rect x="42.2" y="291.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (25 samples, 0.35%)</title><rect x="42.4" y="275.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="45.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (25 samples, 0.35%)</title><rect x="42.4" y="259.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (25 samples, 0.35%)</title><rect x="42.4" y="243.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.4" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (23 samples, 0.33%)</title><rect x="42.7" y="227.0" width="3.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="45.7" y="238.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="42.7" y="211.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="45.7" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.23%)</title><rect x="43.4" y="211.0" width="2.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="46.4" y="222.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.03%)</title><rect x="46.3" y="211.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="49.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title><rect x="46.6" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1,363 samples, 19.30%)</title><rect x="46.9" y="307.0" width="227.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="49.9" y="318.0">java/util/concurrent/locks/Loc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1,362 samples, 19.28%)</title><rect x="47.1" y="291.0" width="227.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="50.1" y="302.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::parker() (3 samples, 0.04%)</title><rect x="56.9" y="275.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="59.9" y="286.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (4 samples, 0.06%)</title><rect x="57.4" y="275.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="60.4" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.04%)</title><rect x="58.4" y="275.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="61.4" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1,290 samples, 18.26%)</title><rect x="59.0" y="275.0" width="215.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="62.0" y="286.0">Unsafe_Park(JNIEnv_*, _jobje..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="59.1" y="259.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="62.1" y="270.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.03%)</title><rect x="59.6" y="259.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="62.6" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (9 samples, 0.13%)</title><rect x="60.1" y="259.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="63.1" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (8 samples, 0.11%)</title><rect x="60.3" y="243.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="63.3" y="254.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (7 samples, 0.10%)</title><rect x="60.5" y="227.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="63.5" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (4 samples, 0.06%)</title><rect x="60.8" y="211.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="63.8" y="222.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (2 samples, 0.03%)</title><rect x="61.1" y="195.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="64.1" y="206.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (16 samples, 0.23%)</title><rect x="61.6" y="259.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="64.6" y="270.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (8 samples, 0.11%)</title><rect x="61.8" y="243.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="64.8" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (7 samples, 0.10%)</title><rect x="62.0" y="227.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="65.0" y="238.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (2 samples, 0.03%)</title><rect x="63.1" y="243.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="66.1" y="254.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (5 samples, 0.07%)</title><rect x="63.5" y="243.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="66.5" y="254.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (4 samples, 0.06%)</title><rect x="63.6" y="227.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="66.6" y="238.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (6 samples, 0.08%)</title><rect x="64.6" y="259.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="67.6" y="270.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (6 samples, 0.08%)</title><rect x="64.6" y="243.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="67.6" y="254.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (3 samples, 0.04%)</title><rect x="65.1" y="227.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="68.1" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1,211 samples, 17.15%)</title><rect x="65.6" y="259.0" width="202.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="68.6" y="270.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.11%)</title><rect x="66.6" y="243.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="69.6" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.08%)</title><rect x="66.8" y="227.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="69.8" y="238.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.03%)</title><rect x="67.3" y="211.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="70.3" y="222.0"></text>
</g>
<g>
<title>Monitor::TryFast() (2 samples, 0.03%)</title><rect x="67.3" y="195.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="70.3" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (1,168 samples, 16.54%)</title><rect x="68.3" y="243.0" width="195.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="71.3" y="254.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (14 samples, 0.20%)</title><rect x="263.4" y="243.0" width="2.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="266.4" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (5 samples, 0.07%)</title><rect x="264.9" y="227.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="267.9" y="238.0"></text>
</g>
<g>
<title>_pthread_testcancel (7 samples, 0.10%)</title><rect x="265.8" y="243.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="268.8" y="254.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.03%)</title><rect x="267.0" y="243.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="270.0" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.04%)</title><rect x="267.5" y="243.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="270.5" y="254.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (2 samples, 0.03%)</title><rect x="268.1" y="259.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="271.1" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="268.5" y="259.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="271.5" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="268.5" y="243.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="271.5" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="268.5" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="271.5" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="268.5" y="211.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="271.5" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="268.5" y="195.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="271.5" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (8 samples, 0.11%)</title><rect x="268.8" y="259.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="271.8" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="269.1" y="243.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="272.1" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="269.5" y="243.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="272.5" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="269.8" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="272.8" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.07%)</title><rect x="270.1" y="259.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="273.1" y="270.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.03%)</title><rect x="271.6" y="259.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="274.6" y="270.0"></text>
</g>
<g>
<title>pthread_cond_wait (8 samples, 0.11%)</title><rect x="272.0" y="259.0" width="1.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="275.0" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (7 samples, 0.10%)</title><rect x="273.3" y="259.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="276.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (42 samples, 0.59%)</title><rect x="274.6" y="323.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="277.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (42 samples, 0.59%)</title><rect x="274.6" y="307.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (36 samples, 0.51%)</title><rect x="274.6" y="291.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (18 samples, 0.25%)</title><rect x="276.3" y="275.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (18 samples, 0.25%)</title><rect x="276.3" y="259.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (2 samples, 0.03%)</title><rect x="276.3" y="243.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.3" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (16 samples, 0.23%)</title><rect x="276.6" y="243.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.6" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (15 samples, 0.21%)</title><rect x="276.8" y="227.0" width="2.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="279.8" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (15 samples, 0.21%)</title><rect x="276.8" y="211.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="279.8" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (14 samples, 0.20%)</title><rect x="277.0" y="195.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="280.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (8 samples, 0.11%)</title><rect x="279.3" y="275.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.08%)</title><rect x="280.6" y="291.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.08%)</title><rect x="280.6" y="275.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.04%)</title><rect x="280.6" y="259.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.04%)</title><rect x="281.2" y="259.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.2" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="281.3" y="243.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (81 samples, 1.15%)</title><rect x="281.7" y="323.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (81 samples, 1.15%)</title><rect x="281.7" y="307.0" width="13.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (81 samples, 1.15%)</title><rect x="281.7" y="291.0" width="13.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="284.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (81 samples, 1.15%)</title><rect x="281.7" y="275.0" width="13.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.7" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (81 samples, 1.15%)</title><rect x="281.7" y="259.0" width="13.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.7" y="270.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.03%)</title><rect x="282.5" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="285.5" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (69 samples, 0.98%)</title><rect x="283.0" y="243.0" width="11.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="286.0" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.04%)</title><rect x="284.5" y="227.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="287.5" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (52 samples, 0.74%)</title><rect x="285.0" y="227.0" width="8.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="288.0" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.03%)</title><rect x="293.7" y="227.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="296.7" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="294.2" y="227.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="297.2" y="238.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.03%)</title><rect x="294.9" y="243.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="297.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer$$Lambda$73/922451766.run (2,831 samples, 40.08%)</title><rect x="295.2" y="355.0" width="473.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.2" y="366.0">ru/mail/polis/service/prohladenn/MyHttpServer$$Lambda$73/92245176..</text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer.lambda$executeAsync$3 (2,829 samples, 40.05%)</title><rect x="295.5" y="339.0" width="472.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.5" y="350.0">ru/mail/polis/service/prohladenn/MyHttpServer.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (958 samples, 13.56%)</title><rect x="295.7" y="323.0" width="160.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="298.7" y="334.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.03%)</title><rect x="298.7" y="307.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="298.7" y="291.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="301.7" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="298.7" y="275.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (915 samples, 12.95%)</title><rect x="299.0" y="307.0" width="152.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.0" y="318.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (44 samples, 0.62%)</title><rect x="299.5" y="291.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.5" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="303.7" y="275.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="306.7" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (17 samples, 0.24%)</title><rect x="304.0" y="275.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.0" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (17 samples, 0.24%)</title><rect x="304.0" y="259.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="307.0" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (17 samples, 0.24%)</title><rect x="304.0" y="243.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="307.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (17 samples, 0.24%)</title><rect x="304.0" y="227.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="307.0" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (868 samples, 12.29%)</title><rect x="306.9" y="291.0" width="145.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="309.9" y="302.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/Session.write (868 samples, 12.29%)</title><rect x="306.9" y="275.0" width="145.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="309.9" y="286.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (858 samples, 12.15%)</title><rect x="307.7" y="259.0" width="143.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.7" y="270.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (858 samples, 12.15%)</title><rect x="307.7" y="243.0" width="143.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.7" y="254.0">one/nio/net/JavaSo..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (22 samples, 0.31%)</title><rect x="308.2" y="227.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (22 samples, 0.31%)</title><rect x="308.2" y="211.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="311.2" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (22 samples, 0.31%)</title><rect x="308.2" y="195.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.2" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (22 samples, 0.31%)</title><rect x="308.2" y="179.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (21 samples, 0.30%)</title><rect x="308.2" y="163.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.2" y="174.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (2 samples, 0.03%)</title><rect x="309.6" y="147.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="312.6" y="158.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="309.9" y="147.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="312.9" y="158.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.11%)</title><rect x="310.4" y="147.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="313.4" y="158.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="310.6" y="131.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="313.6" y="142.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.06%)</title><rect x="311.1" y="131.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="314.1" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.06%)</title><rect x="311.9" y="227.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.9" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (829 samples, 11.74%)</title><rect x="312.6" y="227.0" width="138.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="315.6" y="238.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.07%)</title><rect x="312.7" y="211.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="315.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.07%)</title><rect x="312.7" y="195.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.07%)</title><rect x="312.7" y="179.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.07%)</title><rect x="312.7" y="163.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.04%)</title><rect x="312.7" y="147.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="315.7" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.04%)</title><rect x="312.7" y="131.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="315.7" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.04%)</title><rect x="312.7" y="115.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="315.7" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.03%)</title><rect x="313.2" y="147.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="316.2" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.03%)</title><rect x="313.6" y="211.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="316.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="313.6" y="195.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="316.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title><rect x="313.6" y="179.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.6" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (819 samples, 11.60%)</title><rect x="313.9" y="211.0" width="136.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.9" y="222.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (817 samples, 11.57%)</title><rect x="314.2" y="195.0" width="136.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="317.2" y="206.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.07%)</title><rect x="314.4" y="179.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.4" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.06%)</title><rect x="314.6" y="163.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.6" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.06%)</title><rect x="314.6" y="147.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="317.6" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.06%)</title><rect x="314.6" y="131.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.6" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (4 samples, 0.06%)</title><rect x="314.6" y="115.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="317.6" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (780 samples, 11.04%)</title><rect x="315.2" y="179.0" width="130.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="318.2" y="190.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (780 samples, 11.04%)</title><rect x="315.2" y="163.0" width="130.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.2" y="174.0">sun/nio/ch/Socke..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (780 samples, 11.04%)</title><rect x="315.2" y="147.0" width="130.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="318.2" y="158.0">sun/nio/ch/FileD..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (14 samples, 0.20%)</title><rect x="319.7" y="131.0" width="2.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="322.7" y="142.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.06%)</title><rect x="321.4" y="115.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="324.4" y="126.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.03%)</title><rect x="322.1" y="131.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="325.1" y="142.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="322.4" y="131.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="325.4" y="142.0"></text>
</g>
<g>
<title>write (735 samples, 10.41%)</title><rect x="322.8" y="131.0" width="122.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="325.8" y="142.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (31 samples, 0.44%)</title><rect x="445.5" y="179.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="448.5" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.14%)</title><rect x="446.2" y="163.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="449.2" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.03%)</title><rect x="446.7" y="147.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="449.7" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="447.0" y="147.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="450.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (17 samples, 0.24%)</title><rect x="447.9" y="163.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="450.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (4 samples, 0.06%)</title><rect x="450.1" y="147.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="453.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (5 samples, 0.07%)</title><rect x="451.1" y="259.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="454.1" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (23 samples, 0.33%)</title><rect x="451.9" y="307.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="454.9" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (18 samples, 0.25%)</title><rect x="452.7" y="291.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="455.7" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (18 samples, 0.25%)</title><rect x="452.7" y="275.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.7" y="286.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="455.2" y="259.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="458.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer$$Lambda$68/1402676523.act (1,870 samples, 26.48%)</title><rect x="455.7" y="323.0" width="312.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.7" y="334.0">ru/mail/polis/service/prohladenn/MyHttpSer..</text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer.lambda$entity$1 (1,869 samples, 26.46%)</title><rect x="455.9" y="307.0" width="312.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="458.9" y="318.0">ru/mail/polis/service/prohladenn/MyHttpSer..</text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/HttpServerController.upsert (1,869 samples, 26.46%)</title><rect x="455.9" y="291.0" width="312.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="458.9" y="302.0">ru/mail/polis/service/prohladenn/HttpServe..</text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (2 samples, 0.03%)</title><rect x="458.7" y="275.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.7" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.06%)</title><rect x="459.1" y="275.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="462.1" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.04%)</title><rect x="459.2" y="259.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="462.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.04%)</title><rect x="459.2" y="243.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="462.2" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.04%)</title><rect x="459.2" y="227.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="462.2" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="459.7" y="275.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="462.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.put (1,548 samples, 21.92%)</title><rect x="460.1" y="275.0" width="258.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.1" y="286.0">one/nio/http/HttpClient.put</text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (11 samples, 0.16%)</title><rect x="460.2" y="259.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.2" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,525 samples, 21.59%)</title><rect x="462.1" y="259.0" width="254.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.1" y="270.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,525 samples, 21.59%)</title><rect x="462.1" y="243.0" width="254.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="465.1" y="254.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (900 samples, 12.74%)</title><rect x="462.6" y="227.0" width="150.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="465.6" y="238.0">one/nio/http/HttpCl..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (889 samples, 12.59%)</title><rect x="464.4" y="211.0" width="148.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="467.4" y="222.0">one/nio/net/JavaSoc..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.06%)</title><rect x="464.8" y="195.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="467.8" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="464.8" y="179.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="467.8" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="464.8" y="163.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="467.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (883 samples, 12.50%)</title><rect x="465.4" y="195.0" width="147.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="468.4" y="206.0">sun/nio/ch/SocketCh..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (16 samples, 0.23%)</title><rect x="466.1" y="179.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="469.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (16 samples, 0.23%)</title><rect x="466.1" y="163.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="469.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (12 samples, 0.17%)</title><rect x="466.1" y="147.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="469.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (5 samples, 0.07%)</title><rect x="466.3" y="131.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.3" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.07%)</title><rect x="466.3" y="115.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.3" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (4 samples, 0.06%)</title><rect x="466.4" y="99.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="469.4" y="110.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="466.4" y="83.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="469.4" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.03%)</title><rect x="467.1" y="131.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="470.1" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.03%)</title><rect x="467.1" y="115.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="470.1" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (2 samples, 0.03%)</title><rect x="467.1" y="99.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="470.1" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (4 samples, 0.06%)</title><rect x="467.4" y="131.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="470.4" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (4 samples, 0.06%)</title><rect x="467.4" y="115.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="470.4" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (4 samples, 0.06%)</title><rect x="467.4" y="99.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.4" y="110.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (2 samples, 0.03%)</title><rect x="467.8" y="83.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.8" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.03%)</title><rect x="467.8" y="67.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="470.8" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.06%)</title><rect x="468.1" y="147.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="468.4" y="131.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="471.4" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (845 samples, 11.96%)</title><rect x="468.8" y="179.0" width="141.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="471.8" y="190.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (844 samples, 11.95%)</title><rect x="468.9" y="163.0" width="141.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.9" y="174.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (831 samples, 11.77%)</title><rect x="468.9" y="147.0" width="138.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="471.9" y="158.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (831 samples, 11.77%)</title><rect x="468.9" y="131.0" width="138.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="471.9" y="142.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (831 samples, 11.77%)</title><rect x="468.9" y="115.0" width="138.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="471.9" y="126.0">sun/nio/ch/FileDi..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (6 samples, 0.08%)</title><rect x="477.3" y="99.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="480.3" y="110.0"></text>
</g>
<g>
<title>read (775 samples, 10.97%)</title><rect x="478.3" y="99.0" width="129.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="481.3" y="110.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (13 samples, 0.18%)</title><rect x="607.8" y="147.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.8" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.07%)</title><rect x="607.8" y="131.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="610.8" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.06%)</title><rect x="607.9" y="115.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (8 samples, 0.11%)</title><rect x="608.6" y="131.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="611.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (18 samples, 0.25%)</title><rect x="609.9" y="179.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="612.9" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (13 samples, 0.18%)</title><rect x="610.1" y="163.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="613.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (4 samples, 0.06%)</title><rect x="612.3" y="163.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="615.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (74 samples, 1.05%)</title><rect x="612.9" y="227.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="615.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (49 samples, 0.69%)</title><rect x="615.3" y="211.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.3" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (45 samples, 0.64%)</title><rect x="616.0" y="195.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="619.0" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.03%)</title><rect x="618.6" y="179.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="621.6" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (27 samples, 0.38%)</title><rect x="619.0" y="179.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="622.0" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (10 samples, 0.14%)</title><rect x="623.5" y="211.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="626.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.13%)</title><rect x="623.6" y="195.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="626.6" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.13%)</title><rect x="623.6" y="179.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="626.6" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (35 samples, 0.50%)</title><rect x="625.3" y="227.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="628.3" y="238.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (26 samples, 0.37%)</title><rect x="626.3" y="211.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="629.3" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.04%)</title><rect x="626.6" y="195.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="629.6" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (10 samples, 0.14%)</title><rect x="627.1" y="195.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="630.1" y="206.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.06%)</title><rect x="627.6" y="179.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="630.6" y="190.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.04%)</title><rect x="628.3" y="179.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="631.3" y="190.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="628.5" y="163.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="631.5" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.16%)</title><rect x="628.8" y="195.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="631.8" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.16%)</title><rect x="628.8" y="179.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="631.8" y="190.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.11%)</title><rect x="628.8" y="163.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="631.8" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.03%)</title><rect x="629.8" y="147.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="632.8" y="158.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.04%)</title><rect x="630.2" y="163.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="633.2" y="174.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="630.3" y="147.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="633.3" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.04%)</title><rect x="630.7" y="211.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="633.7" y="222.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.04%)</title><rect x="630.7" y="195.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="633.7" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (13 samples, 0.18%)</title><rect x="631.2" y="227.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="634.2" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.07%)</title><rect x="632.5" y="211.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="635.5" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.07%)</title><rect x="632.5" y="195.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="635.5" y="206.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (483 samples, 6.84%)</title><rect x="633.5" y="227.0" width="80.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.5" y="238.0">one/nio/n..</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (357 samples, 5.05%)</title><rect x="633.5" y="211.0" width="59.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="636.5" y="222.0">java/n..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (357 samples, 5.05%)</title><rect x="633.5" y="195.0" width="59.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="636.5" y="206.0">java/n..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (355 samples, 5.03%)</title><rect x="633.8" y="179.0" width="59.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.8" y="190.0">java/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (351 samples, 4.97%)</title><rect x="634.5" y="163.0" width="58.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="637.5" y="174.0">sun/ni..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.10%)</title><rect x="634.5" y="147.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="637.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.08%)</title><rect x="634.7" y="131.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.08%)</title><rect x="634.7" y="115.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="637.7" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.08%)</title><rect x="634.7" y="99.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="637.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (333 samples, 4.71%)</title><rect x="635.8" y="147.0" width="55.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.8" y="158.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (331 samples, 4.69%)</title><rect x="636.2" y="131.0" width="55.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.2" y="142.0">sun/n..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.03%)</title><rect x="636.2" y="115.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.2" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (320 samples, 4.53%)</title><rect x="636.5" y="115.0" width="53.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.5" y="126.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (320 samples, 4.53%)</title><rect x="636.5" y="99.0" width="53.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.5" y="110.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (320 samples, 4.53%)</title><rect x="636.5" y="83.0" width="53.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.5" y="94.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.03%)</title><rect x="639.0" y="67.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="642.0" y="78.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="639.5" y="67.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="642.5" y="78.0"></text>
</g>
<g>
<title>write (300 samples, 4.25%)</title><rect x="639.8" y="67.0" width="50.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="642.8" y="78.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.13%)</title><rect x="690.0" y="115.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="693.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (7 samples, 0.10%)</title><rect x="690.3" y="99.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="693.3" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (2 samples, 0.03%)</title><rect x="691.1" y="83.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="694.1" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (7 samples, 0.10%)</title><rect x="691.5" y="147.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="694.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (6 samples, 0.08%)</title><rect x="691.6" y="131.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="694.6" y="142.0"></text>
</g>
<g>
<title>JNI_OnLoad (2 samples, 0.03%)</title><rect x="692.0" y="115.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="695.0" y="126.0"></text>
</g>
<g>
<title>pthread_self (2 samples, 0.03%)</title><rect x="692.3" y="115.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="695.3" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (3 samples, 0.04%)</title><rect x="692.6" y="147.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="695.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (125 samples, 1.77%)</title><rect x="693.1" y="211.0" width="20.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="696.1" y="222.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (122 samples, 1.73%)</title><rect x="693.6" y="195.0" width="20.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="696.6" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (2 samples, 0.03%)</title><rect x="694.5" y="179.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="697.5" y="190.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (87 samples, 1.23%)</title><rect x="695.0" y="179.0" width="14.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="698.0" y="190.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (2 samples, 0.03%)</title><rect x="697.7" y="163.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="700.7" y="174.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (2 samples, 0.03%)</title><rect x="697.7" y="147.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="700.7" y="158.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (2 samples, 0.03%)</title><rect x="697.7" y="131.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="700.7" y="142.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.03%)</title><rect x="698.0" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="701.0" y="174.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (14 samples, 0.20%)</title><rect x="698.5" y="163.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="701.5" y="174.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.04%)</title><rect x="699.8" y="147.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="702.8" y="158.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (3 samples, 0.04%)</title><rect x="699.8" y="131.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="702.8" y="142.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.03%)</title><rect x="700.5" y="147.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="703.5" y="158.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (6 samples, 0.08%)</title><rect x="700.8" y="163.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="703.8" y="174.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.06%)</title><rect x="700.8" y="147.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="703.8" y="158.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.03%)</title><rect x="701.0" y="131.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="704.0" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="701.8" y="163.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="704.8" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.11%)</title><rect x="702.2" y="163.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="705.2" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.11%)</title><rect x="702.2" y="147.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="705.2" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.06%)</title><rect x="702.7" y="131.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="705.7" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="702.7" y="115.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="705.7" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.06%)</title><rect x="702.7" y="99.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="705.7" y="110.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (3 samples, 0.04%)</title><rect x="702.8" y="83.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="705.8" y="94.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (2 samples, 0.03%)</title><rect x="703.5" y="163.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="706.5" y="174.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (3 samples, 0.04%)</title><rect x="704.3" y="163.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="707.3" y="174.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (3 samples, 0.04%)</title><rect x="704.3" y="147.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="707.3" y="158.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (28 samples, 0.40%)</title><rect x="704.8" y="163.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="707.8" y="174.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (6 samples, 0.08%)</title><rect x="705.0" y="147.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="708.0" y="158.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (5 samples, 0.07%)</title><rect x="705.2" y="131.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="708.2" y="142.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (20 samples, 0.28%)</title><rect x="706.2" y="147.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="709.2" y="158.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.07%)</title><rect x="706.3" y="131.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="709.3" y="142.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (5 samples, 0.07%)</title><rect x="706.3" y="115.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="709.3" y="126.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title><rect x="706.7" y="99.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="709.7" y="110.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.04%)</title><rect x="706.7" y="83.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="709.7" y="94.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.03%)</title><rect x="706.8" y="67.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="709.8" y="78.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (14 samples, 0.20%)</title><rect x="707.2" y="131.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="710.2" y="142.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (3 samples, 0.04%)</title><rect x="707.3" y="115.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="710.3" y="126.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (3 samples, 0.04%)</title><rect x="707.8" y="115.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="710.8" y="126.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (7 samples, 0.10%)</title><rect x="708.3" y="115.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="711.3" y="126.0"></text>
</g>
<g>
<title>nmethod::metadata_addr_at(int) const (2 samples, 0.03%)</title><rect x="708.8" y="99.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="711.8" y="110.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.04%)</title><rect x="709.5" y="179.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="712.5" y="190.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.03%)</title><rect x="710.0" y="179.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="713.0" y="190.0"></text>
</g>
<g>
<title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (2 samples, 0.03%)</title><rect x="711.0" y="179.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="714.0" y="190.0"></text>
</g>
<g>
<title>call_stub (6 samples, 0.08%)</title><rect x="711.4" y="179.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="714.4" y="190.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.03%)</title><rect x="712.5" y="179.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="715.5" y="190.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.03%)</title><rect x="712.9" y="179.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="715.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (3 samples, 0.04%)</title><rect x="713.2" y="179.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="716.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (2 samples, 0.03%)</title><rect x="713.4" y="163.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="716.4" y="174.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (2 samples, 0.03%)</title><rect x="713.4" y="147.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="716.4" y="158.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (8 samples, 0.11%)</title><rect x="714.2" y="227.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.2" y="238.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (4 samples, 0.06%)</title><rect x="714.9" y="211.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="717.9" y="222.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (4 samples, 0.06%)</title><rect x="714.9" y="195.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="717.9" y="206.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (8 samples, 0.11%)</title><rect x="715.5" y="227.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="718.5" y="238.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (6 samples, 0.08%)</title><rect x="715.9" y="211.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="718.9" y="222.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (6 samples, 0.08%)</title><rect x="715.9" y="195.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="718.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (11 samples, 0.16%)</title><rect x="716.9" y="259.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="719.9" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (2 samples, 0.03%)</title><rect x="718.4" y="243.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="721.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/LSMDao.upsert (283 samples, 4.01%)</title><rect x="718.7" y="275.0" width="47.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="721.7" y="286.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/prohladenn/MemTablePool.upsert (283 samples, 4.01%)</title><rect x="718.7" y="259.0" width="47.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="721.7" y="270.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/prohladenn/MemTable.upsert (274 samples, 3.88%)</title><rect x="718.7" y="243.0" width="45.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="721.7" y="254.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (218 samples, 3.09%)</title><rect x="718.7" y="227.0" width="36.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="721.7" y="238.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (215 samples, 3.04%)</title><rect x="719.2" y="211.0" width="35.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="722.2" y="222.0">jav..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (11 samples, 0.16%)</title><rect x="720.7" y="195.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.7" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (2 samples, 0.03%)</title><rect x="722.2" y="179.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="725.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (195 samples, 2.76%)</title><rect x="722.5" y="195.0" width="32.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="725.5" y="206.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (166 samples, 2.35%)</title><rect x="727.4" y="179.0" width="27.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="730.4" y="190.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (160 samples, 2.27%)</title><rect x="728.4" y="163.0" width="26.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.4" y="174.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.04%)</title><rect x="732.7" y="147.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="735.7" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (37 samples, 0.52%)</title><rect x="733.2" y="147.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="736.2" y="158.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (71 samples, 1.01%)</title><rect x="739.4" y="147.0" width="11.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="742.4" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (29 samples, 0.41%)</title><rect x="746.4" y="131.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="749.4" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (10 samples, 0.14%)</title><rect x="749.3" y="115.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="752.3" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.03%)</title><rect x="750.9" y="115.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="753.9" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (22 samples, 0.31%)</title><rect x="751.4" y="147.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="754.4" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (16 samples, 0.23%)</title><rect x="752.4" y="131.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="755.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/Value.getData (21 samples, 0.30%)</title><rect x="755.1" y="227.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="758.1" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (21 samples, 0.30%)</title><rect x="755.1" y="211.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="758.1" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (21 samples, 0.30%)</title><rect x="755.1" y="195.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="758.1" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (21 samples, 0.30%)</title><rect x="755.1" y="179.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="758.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (21 samples, 0.30%)</title><rect x="755.1" y="163.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="758.1" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.16%)</title><rect x="756.8" y="147.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="759.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.06%)</title><rect x="757.1" y="131.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="760.1" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="757.8" y="131.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="760.8" y="142.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.04%)</title><rect x="758.1" y="131.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="761.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/Value.of (35 samples, 0.50%)</title><rect x="758.6" y="227.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="761.6" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (35 samples, 0.50%)</title><rect x="758.6" y="211.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="761.6" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (35 samples, 0.50%)</title><rect x="758.6" y="195.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="761.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.50%)</title><rect x="758.6" y="179.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="761.6" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (35 samples, 0.50%)</title><rect x="758.6" y="163.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="761.6" y="174.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="761.8" y="147.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="764.8" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (4 samples, 0.06%)</title><rect x="762.5" y="147.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="765.5" y="158.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (8 samples, 0.11%)</title><rect x="763.1" y="147.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="766.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/prohladenn/MemTablePool.enqueueFlush (9 samples, 0.13%)</title><rect x="764.5" y="243.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="767.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock (9 samples, 0.13%)</title><rect x="764.5" y="227.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="767.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.13%)</title><rect x="764.5" y="211.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="767.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.13%)</title><rect x="764.5" y="195.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="767.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.08%)</title><rect x="765.0" y="179.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="768.0" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/HttpServerController.replicas (12 samples, 0.17%)</title><rect x="766.0" y="275.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="769.0" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (4 samples, 0.06%)</title><rect x="766.3" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="769.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/BasicTopology.all (6 samples, 0.08%)</title><rect x="767.0" y="259.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="770.0" y="270.0"></text>
</g>
<g>
<title>java/util/Set.of (6 samples, 0.08%)</title><rect x="767.0" y="243.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="770.0" y="254.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,503 samples, 35.44%)</title><rect x="768.2" y="403.0" width="418.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="771.2" y="414.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.06%)</title><rect x="770.2" y="387.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="773.2" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (3 samples, 0.04%)</title><rect x="770.2" y="371.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="773.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.06%)</title><rect x="771.0" y="387.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="774.0" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="771.3" y="371.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="774.3" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.03%)</title><rect x="771.3" y="355.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="774.3" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,537 samples, 21.76%)</title><rect x="771.8" y="387.0" width="256.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="774.8" y="398.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>__cxx_global_var_init.4 (2 samples, 0.03%)</title><rect x="772.5" y="371.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="775.5" y="382.0"></text>
</g>
<g>
<title>_res (5 samples, 0.07%)</title><rect x="772.8" y="371.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="775.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (11 samples, 0.16%)</title><rect x="773.7" y="371.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="776.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (4 samples, 0.06%)</title><rect x="774.8" y="355.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="777.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.06%)</title><rect x="774.8" y="339.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="777.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.06%)</title><rect x="774.8" y="323.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="777.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (4 samples, 0.06%)</title><rect x="774.8" y="307.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="777.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (4 samples, 0.06%)</title><rect x="774.8" y="291.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="777.8" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (6 samples, 0.08%)</title><rect x="775.5" y="371.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="778.5" y="382.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.06%)</title><rect x="776.5" y="371.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="779.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1,504 samples, 21.29%)</title><rect x="777.2" y="371.0" width="251.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="780.2" y="382.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,504 samples, 21.29%)</title><rect x="777.2" y="355.0" width="251.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="780.2" y="366.0">sun/nio/ch/SelectorImpl.lockAndDo..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,500 samples, 21.24%)</title><rect x="777.8" y="339.0" width="250.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="780.8" y="350.0">sun/nio/ch/KQueueSelectorImpl.doS..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (1,430 samples, 20.25%)</title><rect x="778.0" y="323.0" width="238.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="781.0" y="334.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JNI_OnLoad (2 samples, 0.03%)</title><rect x="787.5" y="307.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="790.5" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.07%)</title><rect x="788.0" y="307.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="791.0" y="318.0"></text>
</g>
<g>
<title>kevent (1,365 samples, 19.33%)</title><rect x="788.9" y="307.0" width="228.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="791.9" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (27 samples, 0.38%)</title><rect x="1016.9" y="323.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1019.9" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (2 samples, 0.03%)</title><rect x="1017.8" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1020.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.08%)</title><rect x="1018.1" y="307.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1021.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.06%)</title><rect x="1018.1" y="291.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1021.1" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.03%)</title><rect x="1018.8" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1021.8" y="302.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (2 samples, 0.03%)</title><rect x="1018.8" y="275.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1021.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (14 samples, 0.20%)</title><rect x="1019.1" y="307.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1022.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.add (9 samples, 0.13%)</title><rect x="1019.3" y="291.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1022.3" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 0.13%)</title><rect x="1019.3" y="275.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1022.3" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 0.13%)</title><rect x="1019.3" y="259.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1022.3" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.07%)</title><rect x="1019.8" y="243.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1022.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.03%)</title><rect x="1021.1" y="291.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1024.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (10 samples, 0.14%)</title><rect x="1021.4" y="323.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1024.4" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (4 samples, 0.06%)</title><rect x="1022.4" y="307.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1025.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (15 samples, 0.21%)</title><rect x="1023.1" y="323.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1026.1" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (15 samples, 0.21%)</title><rect x="1023.1" y="307.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1026.1" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.03%)</title><rect x="1023.3" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1026.3" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (11 samples, 0.16%)</title><rect x="1023.6" y="291.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1026.6" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (11 samples, 0.16%)</title><rect x="1023.6" y="275.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1026.6" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (11 samples, 0.16%)</title><rect x="1023.6" y="259.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1026.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (5 samples, 0.07%)</title><rect x="1025.6" y="323.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1028.6" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (5 samples, 0.07%)</title><rect x="1025.6" y="307.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1028.6" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.07%)</title><rect x="1025.6" y="291.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1028.6" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (5 samples, 0.07%)</title><rect x="1025.6" y="275.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1028.6" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (5 samples, 0.07%)</title><rect x="1025.6" y="259.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1028.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (12 samples, 0.17%)</title><rect x="1026.4" y="323.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1029.4" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (3 samples, 0.04%)</title><rect x="1027.4" y="307.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1030.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.04%)</title><rect x="1027.9" y="307.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1030.9" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.04%)</title><rect x="1027.9" y="291.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1030.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (941 samples, 13.32%)</title><rect x="1028.6" y="387.0" width="157.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1031.6" y="398.0">one/nio/net/Session...</text>
</g>
<g>
<title>gettimeofday (5 samples, 0.07%)</title><rect x="1029.8" y="371.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1032.8" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (916 samples, 12.97%)</title><rect x="1030.6" y="371.0" width="153.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1033.6" y="382.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (625 samples, 8.85%)</title><rect x="1031.3" y="355.0" width="104.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1034.3" y="366.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (479 samples, 6.78%)</title><rect x="1036.0" y="339.0" width="80.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1039.0" y="350.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (476 samples, 6.74%)</title><rect x="1036.5" y="323.0" width="79.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1039.5" y="334.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (455 samples, 6.44%)</title><rect x="1036.5" y="307.0" width="76.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1039.5" y="318.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (33 samples, 0.47%)</title><rect x="1036.8" y="291.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1039.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.10%)</title><rect x="1039.3" y="275.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1042.3" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.10%)</title><rect x="1039.3" y="259.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1042.3" y="270.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.07%)</title><rect x="1039.6" y="243.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1042.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.06%)</title><rect x="1040.5" y="275.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1043.5" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.06%)</title><rect x="1040.5" y="259.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1043.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.08%)</title><rect x="1041.3" y="275.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1044.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="1041.8" y="259.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1044.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="1041.8" y="243.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1044.8" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.04%)</title><rect x="1041.8" y="227.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1044.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer.entity (420 samples, 5.95%)</title><rect x="1042.3" y="291.0" width="70.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1045.3" y="302.0">ru/mail/..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (17 samples, 0.24%)</title><rect x="1044.0" y="275.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1047.0" y="286.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.16%)</title><rect x="1045.0" y="259.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1048.0" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.16%)</title><rect x="1045.0" y="243.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1048.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/BasicTopology.all (16 samples, 0.23%)</title><rect x="1046.8" y="275.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1049.8" y="286.0"></text>
</g>
<g>
<title>java/util/Set.of (16 samples, 0.23%)</title><rect x="1046.8" y="259.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1049.8" y="270.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$Set12.&lt;init&gt; (11 samples, 0.16%)</title><rect x="1047.2" y="243.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1050.2" y="254.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$AbstractImmutableSet.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1048.3" y="227.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1051.3" y="238.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$AbstractImmutableCollection.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1048.5" y="211.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1051.5" y="222.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1049.0" y="243.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1052.0" y="254.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.probe (3 samples, 0.04%)</title><rect x="1049.0" y="227.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1052.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer.executeAsync (377 samples, 5.34%)</title><rect x="1049.5" y="275.0" width="63.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1052.5" y="286.0">ru/mai..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.03%)</title><rect x="1049.5" y="259.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1052.5" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.03%)</title><rect x="1049.5" y="243.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1052.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer$$Lambda$73/922451766.get$Lambda (2 samples, 0.03%)</title><rect x="1049.5" y="227.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1052.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/prohladenn/MyHttpServer$$Lambda$73/922451766.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1049.5" y="211.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1052.5" y="222.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1049.5" y="195.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1052.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (375 samples, 5.31%)</title><rect x="1049.8" y="259.0" width="62.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1052.8" y="270.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (375 samples, 5.31%)</title><rect x="1049.8" y="243.0" width="62.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1052.8" y="254.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (345 samples, 4.88%)</title><rect x="1049.8" y="227.0" width="57.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1052.8" y="238.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="1049.8" y="211.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1052.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="1049.8" y="195.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1052.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="1049.8" y="179.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1052.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="1049.8" y="163.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1052.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="1049.8" y="147.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1052.8" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="1049.8" y="131.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1052.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (343 samples, 4.86%)</title><rect x="1050.2" y="211.0" width="57.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1053.2" y="222.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (343 samples, 4.86%)</title><rect x="1050.2" y="195.0" width="57.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1053.2" y="206.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (343 samples, 4.86%)</title><rect x="1050.2" y="179.0" width="57.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1053.2" y="190.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (343 samples, 4.86%)</title><rect x="1050.2" y="163.0" width="57.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1053.2" y="174.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (343 samples, 4.86%)</title><rect x="1050.2" y="147.0" width="57.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1053.2" y="158.0">jdk/in..</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (4 samples, 0.06%)</title><rect x="1052.2" y="131.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1055.2" y="142.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (6 samples, 0.08%)</title><rect x="1052.8" y="131.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1055.8" y="142.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.03%)</title><rect x="1054.2" y="131.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1057.2" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (309 samples, 4.37%)</title><rect x="1054.8" y="131.0" width="51.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1057.8" y="142.0">Unsaf..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (9 samples, 0.13%)</title><rect x="1055.5" y="115.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1058.5" y="126.0"></text>
</g>
<g>
<title>Chunk::next() const (4 samples, 0.06%)</title><rect x="1056.3" y="99.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1059.3" y="110.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="1057.2" y="115.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1060.2" y="126.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.06%)</title><rect x="1058.0" y="115.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.0" y="126.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (3 samples, 0.04%)</title><rect x="1058.2" y="99.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.2" y="110.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.04%)</title><rect x="1058.2" y="83.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.2" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (3 samples, 0.04%)</title><rect x="1058.2" y="67.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.2" y="78.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (2 samples, 0.03%)</title><rect x="1058.2" y="51.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1061.2" y="62.0"></text>
</g>
<g>
<title>Thread::current() (10 samples, 0.14%)</title><rect x="1059.0" y="115.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1062.0" y="126.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.03%)</title><rect x="1059.0" y="99.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.0" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (8 samples, 0.11%)</title><rect x="1059.4" y="99.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1062.4" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (9 samples, 0.13%)</title><rect x="1061.0" y="115.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1064.0" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.10%)</title><rect x="1061.2" y="99.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.2" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.07%)</title><rect x="1061.2" y="83.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1064.2" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.04%)</title><rect x="1061.5" y="67.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1064.5" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="1061.5" y="51.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.5" y="62.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="1061.7" y="35.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.7" y="46.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (2 samples, 0.03%)</title><rect x="1062.0" y="83.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1065.0" y="94.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (5 samples, 0.07%)</title><rect x="1062.5" y="115.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1065.5" y="126.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="1062.7" y="99.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.7" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="1063.0" y="99.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1066.0" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (6 samples, 0.08%)</title><rect x="1063.4" y="115.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1066.4" y="126.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (5 samples, 0.07%)</title><rect x="1063.5" y="99.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1066.5" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (11 samples, 0.16%)</title><rect x="1064.4" y="115.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.4" y="126.0"></text>
</g>
<g>
<title>__psynch_cvsignal (219 samples, 3.10%)</title><rect x="1066.2" y="115.0" width="36.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1069.2" y="126.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (4 samples, 0.06%)</title><rect x="1103.1" y="115.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.1" y="126.0"></text>
</g>
<g>
<title>pthread_cond_signal (7 samples, 0.10%)</title><rect x="1104.0" y="115.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1107.0" y="126.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (5 samples, 0.07%)</title><rect x="1104.3" y="99.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1107.3" y="110.0"></text>
</g>
<g>
<title>pthread_mutex_lock (8 samples, 0.11%)</title><rect x="1105.1" y="115.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1108.1" y="126.0"></text>
</g>
<g>
<title>addr_from_java(long) (2 samples, 0.03%)</title><rect x="1106.5" y="131.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1109.5" y="142.0"></text>
</g>
<g>
<title>os::verify_stack_alignment() (3 samples, 0.04%)</title><rect x="1106.8" y="131.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (9 samples, 0.13%)</title><rect x="1107.5" y="227.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1110.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (9 samples, 0.13%)</title><rect x="1107.5" y="211.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1110.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.06%)</title><rect x="1108.3" y="195.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1111.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.03%)</title><rect x="1108.3" y="179.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1111.3" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="1108.3" y="163.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1111.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.03%)</title><rect x="1108.6" y="179.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1111.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (16 samples, 0.23%)</title><rect x="1109.0" y="227.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1112.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (15 samples, 0.21%)</title><rect x="1109.1" y="211.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1112.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (9 samples, 0.13%)</title><rect x="1109.6" y="195.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1112.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (5 samples, 0.07%)</title><rect x="1110.0" y="179.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1113.0" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.07%)</title><rect x="1110.0" y="163.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1113.0" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (3 samples, 0.04%)</title><rect x="1110.3" y="147.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1113.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (2 samples, 0.03%)</title><rect x="1110.8" y="179.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1113.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.04%)</title><rect x="1111.1" y="195.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1114.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.04%)</title><rect x="1111.1" y="179.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1114.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.07%)</title><rect x="1111.6" y="227.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1114.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.07%)</title><rect x="1111.6" y="211.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1114.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.07%)</title><rect x="1111.6" y="195.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1114.6" y="206.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (18 samples, 0.25%)</title><rect x="1112.6" y="307.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1115.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (18 samples, 0.25%)</title><rect x="1112.6" y="291.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1115.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (12 samples, 0.17%)</title><rect x="1112.6" y="275.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1115.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equals (6 samples, 0.08%)</title><rect x="1113.7" y="259.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1116.7" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.08%)</title><rect x="1114.7" y="275.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1117.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.08%)</title><rect x="1114.7" y="259.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1117.7" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.06%)</title><rect x="1115.0" y="243.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1118.0" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.03%)</title><rect x="1115.7" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1118.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="1115.7" y="291.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1118.7" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="1115.7" y="275.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1118.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1115.7" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1118.7" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (45 samples, 0.64%)</title><rect x="1116.0" y="339.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1119.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1118.0" y="323.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1121.0" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="1118.0" y="307.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1121.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="1118.0" y="291.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1121.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="1118.2" y="275.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1121.2" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (18 samples, 0.25%)</title><rect x="1118.5" y="323.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1121.5" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.24%)</title><rect x="1118.7" y="307.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1121.7" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (12 samples, 0.17%)</title><rect x="1121.5" y="323.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1124.5" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="1123.2" y="307.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1126.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (10 samples, 0.14%)</title><rect x="1123.5" y="339.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1126.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.07%)</title><rect x="1123.8" y="323.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1126.8" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.07%)</title><rect x="1123.8" y="307.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1126.8" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.digit (4 samples, 0.06%)</title><rect x="1123.8" y="291.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1126.8" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.digit (4 samples, 0.06%)</title><rect x="1123.8" y="275.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1126.8" y="286.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (4 samples, 0.06%)</title><rect x="1123.8" y="259.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1126.8" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="1124.7" y="323.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1127.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.04%)</title><rect x="1125.2" y="339.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1128.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.04%)</title><rect x="1125.2" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1128.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (29 samples, 0.41%)</title><rect x="1125.7" y="339.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1128.7" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (17 samples, 0.24%)</title><rect x="1127.7" y="323.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1130.7" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (17 samples, 0.24%)</title><rect x="1127.7" y="307.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1130.7" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="1129.9" y="291.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1132.9" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (30 samples, 0.42%)</title><rect x="1130.7" y="339.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1133.7" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (29 samples, 0.41%)</title><rect x="1130.9" y="323.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1133.9" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (287 samples, 4.06%)</title><rect x="1135.7" y="355.0" width="48.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1138.7" y="366.0">one/..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="1136.7" y="339.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.7" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (277 samples, 3.92%)</title><rect x="1137.0" y="339.0" width="46.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1140.0" y="350.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.06%)</title><rect x="1137.0" y="323.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1140.0" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1137.0" y="307.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1140.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1137.0" y="291.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1140.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (273 samples, 3.87%)</title><rect x="1137.7" y="323.0" width="45.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1140.7" y="334.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (18 samples, 0.25%)</title><rect x="1137.9" y="307.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1140.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (18 samples, 0.25%)</title><rect x="1137.9" y="291.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1140.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (14 samples, 0.20%)</title><rect x="1138.0" y="275.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1141.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (13 samples, 0.18%)</title><rect x="1138.2" y="259.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1141.2" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (13 samples, 0.18%)</title><rect x="1138.2" y="243.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1141.2" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (13 samples, 0.18%)</title><rect x="1138.2" y="227.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1141.2" y="238.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (5 samples, 0.07%)</title><rect x="1139.5" y="211.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1142.5" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="1139.7" y="195.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1142.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.04%)</title><rect x="1140.4" y="275.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1143.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (248 samples, 3.51%)</title><rect x="1140.9" y="307.0" width="41.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1143.9" y="318.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (248 samples, 3.51%)</title><rect x="1140.9" y="291.0" width="41.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1143.9" y="302.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (243 samples, 3.44%)</title><rect x="1140.9" y="275.0" width="40.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1143.9" y="286.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (243 samples, 3.44%)</title><rect x="1140.9" y="259.0" width="40.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1143.9" y="270.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (243 samples, 3.44%)</title><rect x="1140.9" y="243.0" width="40.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1143.9" y="254.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (8 samples, 0.11%)</title><rect x="1144.1" y="227.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1147.1" y="238.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.06%)</title><rect x="1144.7" y="211.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1147.7" y="222.0"></text>
</g>
<g>
<title>read (216 samples, 3.06%)</title><rect x="1145.4" y="227.0" width="36.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1148.4" y="238.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.06%)</title><rect x="1181.5" y="275.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1184.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.04%)</title><rect x="1181.6" y="259.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1184.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (6 samples, 0.08%)</title><rect x="1182.3" y="307.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1185.3" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (5 samples, 0.07%)</title><rect x="1182.5" y="291.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1185.5" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.04%)</title><rect x="1182.8" y="275.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1185.8" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.03%)</title><rect x="1183.3" y="339.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1186.3" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (13 samples, 0.18%)</title><rect x="1183.7" y="371.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="382.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="1183.8" y="355.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1186.8" y="366.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="1184.0" y="339.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1187.0" y="350.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="1184.0" y="323.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1187.0" y="334.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (9 samples, 0.13%)</title><rect x="1184.3" y="355.0" width="1.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1187.3" y="366.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="1185.8" y="387.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="398.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.03%)</title><rect x="1185.8" y="371.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1188.8" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="1186.3" y="403.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.3" y="414.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.04%)</title><rect x="1186.7" y="403.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.7" y="414.0"></text>
</g>
<g>
<title>thread_start (17 samples, 0.24%)</title><rect x="1187.2" y="403.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1190.2" y="414.0"></text>
</g>
<g>
<title>_pthread_start (17 samples, 0.24%)</title><rect x="1187.2" y="387.0" width="2.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1190.2" y="398.0"></text>
</g>
<g>
<title>_pthread_body (17 samples, 0.24%)</title><rect x="1187.2" y="371.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1190.2" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (17 samples, 0.24%)</title><rect x="1187.2" y="355.0" width="2.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1190.2" y="366.0"></text>
</g>
<g>
<title>GangWorker::loop() (17 samples, 0.24%)</title><rect x="1187.2" y="339.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.2" y="350.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 0.20%)</title><rect x="1187.2" y="323.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.2" y="334.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (14 samples, 0.20%)</title><rect x="1187.2" y="307.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="318.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (14 samples, 0.20%)</title><rect x="1187.2" y="291.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (14 samples, 0.20%)</title><rect x="1187.2" y="275.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.2" y="286.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (14 samples, 0.20%)</title><rect x="1187.2" y="259.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.2" y="270.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (13 samples, 0.18%)</title><rect x="1187.3" y="243.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.3" y="254.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (10 samples, 0.14%)</title><rect x="1187.3" y="227.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.3" y="238.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (6 samples, 0.08%)</title><rect x="1187.8" y="211.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="222.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 0.07%)</title><rect x="1188.0" y="195.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="206.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (3 samples, 0.04%)</title><rect x="1188.3" y="179.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.3" y="190.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.04%)</title><rect x="1189.0" y="227.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="238.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.04%)</title><rect x="1189.0" y="211.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="222.0"></text>
</g>
</g>
</svg>
